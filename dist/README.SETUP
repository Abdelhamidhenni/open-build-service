This file briefly describes how to setup an openSUSE Build Service
(OBS) with the rpm packages from the openSUSE project.  By default all
services run on the same system.  This document does not describe how
to distribute them to increase reliability and do load balancing, but
this is possible.

1. run the backend
==================
The backend hosts all sources and built packages.  It also schedules
the jobs.
You need to install the "obs-server" package for this.

1.1 start the following services in this order
==============================================

WARNING: The following starts services which are accessible from the outside.
         Do not do this on a system connected to an untrusted network or be
         sure to block the ports via a firewall.

   rcobsrepserver start
   rcobssrcserver start
   rcobsscheduler start
   rcobsdispatcher start
   rcobspublisher  start

The data get hosted inside of /srv/obs directory by default.

2. start the workers
====================
The workers ask the backend for open build jobs and do the build.
You need to install the "obs-worker" package for this.

2.1 local worker
================
A worker can be started on the localhost by calling

   # rcobsworker start

2.2 setup multiple workers on remote systems
============================================
A worker can be started on other machine in your network (in Internet too, 
but you should have really fast Internet connection ;-)). You must install
package obs-worker on this machine and change few configuration files on both
system.

2.2.1 necessary changes on machine *main* machine
=================================================
In file /usr/lib/obs/server/BSConfig.pm you should change variables $srcserver, $reposerver and
array @reposervers. After install there are http://localhost but in this case you should have there
output of hostname -f or IPs. (You should keep port number)

2.2.2 necessary changes on worker machine
=========================================
Install package obs-worker and in file /etc/sysconfig/obs-worker change variable OBS_STORAGE_SERVER to
main.fqdn:6262 where main.fqdn is output of hostname -f or IP on *main* machine.

3. run the frontend
===================

You need to install the "obs-api" package for this and a MySQL server
on this or a remote host.

3.1 Setup and configure the MySQL database
==========================================

3.1 Initialize fresh Database
=============================

* start the MySQL database

     # rcmysql start    # use "insserv mysql" for permanent start

  If you do this for the first time, MySQL will initialize itself and
  ask to create a root password in the database, like this:

      # /usr/bin/mysqladmin -u root password 'your-password'

* Create the empty production databases:

      # mysql -u root -p
      mysql> create database frontend_production;
      mysql> create database webclient_production;
      mysql> quit

* If you use the MySQL database for other services, too, then
  it's recommended to add a separate MySQL user, e.g.g 'obs', like
  this:

      # mysql -u root -p'your-password'
      GRANT all privileges
      ON frontend_production.* 
      TO 'obs'@'%', 'obs'@'localhost' IDENTIFIED BY 'obs-password';

      GRANT all privileges
      ON webclient_production.* 
      TO 'obs'@'%', 'obs'@'localhost' IDENTIFIED BY 'obs-password';

      FLUSH PRIVILEGES;

* Configure your MySQL user and password in
  in the "production_slave:" section of these files:

    /srv/www/obs/frontend/config/database.yml
    /srv/www/obs/webclient/config/database.yml

* populate the database

      # cd /srv/www/obs/frontend/
      # RAILS_ENV="production_slave" rake db:migrate

3.2 Setup and configure the frontend and webclient
==================================================

Afterwards the configuration of the frontend (and webclient) rails
interface is needed. A configuration for accessing via
http://127.0.42.1 and http://127.0.42.2 gets automatically installed
into /etc/lighttpd/vhosts.d/obs.conf

If you need other hostnames, edit that file
/etc/lighttpd/vhosts.d/obs.conf:

    $HTTP["host"] =~ "buildserver.my.domain.example.org" {
      ...
    }


To enable these vhosts, make sure to uncomment the following is in the
'custom includes' section at the bottom of
/etc/lighttpd/lighttpd.conf:


  ##
  ## custom includes like vhosts.
  ##
  #include "conf.d/config.conf"
  # following line uncommented as per
  # /usr/share/doc/packages/obs-api/README.SETUP
  include_shell "cat vhosts.d/*.conf"


Also, the modules "mod_magnet", "mod_rewrite" and fastcgi need to be
enabled by uncommenting the corresponding lines in
/etc/lighttpd/modules.conf:

    server.modules = (
      "mod_access",
    #  "mod_alias",
    #  "mod_auth",
    #  "mod_evasive",
    #  "mod_redirect",
      "mod_rewrite",
    #  "mod_setenv",
    #  "mod_usertrack",
    )

    ##
    ## mod_magnet
    ##
    include "conf.d/magnet.conf"

    ##
    ## FastCGI (mod_fastcgi)
    ##
    include "conf.d/fastcgi.conf"


Afterwards you can start the OBS web frontends via 

    rclighttpd start  # use "insserv lighttpd" for permanent start


4. Setup initial distributions
==============================

The easiest way is reuse a base distro hosted at openSUSE.org.
The Build Service has a mechanism to reuse projects from a remote instance
since version 0.9. It is recommended to use this mechanism.
In addition to that, it is also possible to copy base projects via an provided scripts.

4.1 Reuse projects hosted on openSUSE.org build service
=======================================================

Import the reference project pointing to the openSUSE.org build service with 
the following command:

 # curl -0 --user "Admin:opensuse" -X PUT \
        -T /usr/share/doc/packages/obs-api/openSUSE.org.xml  \
        http://127.0.42.2/source/openSUSE.org/_meta


4.2 import base distributions into the backend
==============================================

This point can be skipped, when you did run point 4.1 successfully. 
In case you want a full copy of a base distribution you need to do
the following steps:

 # become root user
 su -

 # validate that osc has account data, you may need to enter your
 # account data for api.openSUSE.org here
 osc

 # run the script to mirror openSUSE:10.2 for example
 obs_mirror_project openSUSE:10.2 standard i586

 # restart the scheduler to scan the new project
 rcobsscheduler restart

 Run the frontend import script:
 # cd /srv/www/obs/frontend/script
 # RAILS_ENV="production_slave" ruby import

5. Access
=========

By default you can access the api via using any browser with the URL

  http://127.0.42.2

The web interface is accessible via

  http://127.0.42.1

The default user is "Admin" with the password "opensuse".


6. Using osc with your local build service:
===========================================

In order to use the command line tool for the build service, change
your ~/.oscrc to something like this:

[general]

# Downloaded packages are cached here. Must be writable by you.
#packagecachedir = /var/tmp/osbuild-packagecache

# Wrapper to call build as root (sudo, su -, ...)
#su-wrapper = su -c

# rootdir to setup the chroot environment
# can contain %(repo)s and/or %(arch)s for replacement
#build-root = /var/tmp/build-root

# use this API server
# (it needs a section [api.opensuse.org] with the credentials)
#apisrv = https://api.opensuse.org

# our local build service api:
apisrv = http://127.0.42.2

# local default admin account
[http://127.0.42.2]
user = Admin
pass = opensuse

# normal build service account
[https://api.opensuse.org]
user = foo
pass = bar

6.1. Test build
===============
You can do a test build like this:

(in a svn co of the current openSUSE build server, in the
buildservice/dist subdir)

Add an openSUSE:Tools project with an obs-server package.  the
following commands offer you a template project or package description
file.  In the self- explanatory xml, only enable the 10.2 distro on
i586:

   osc -A http://127.0.42.2 meta prj openSUSE:Tools -e

check whether that worked on http://127.0.42.1/project/list_all

   osc -A http://127.0.42.2 meta pkg openSUSE:Tools obs-server -e

check whether that worked on
http://127.0.42.1/project/show?project=openSUSE%3ATools

Now prepare for a check-in.  This will do a checkout and locally build
using the packages from your local buildserver:

  OBSOPT="-A http://127.0.42.2" ./distribute

now do a check-in into the build server:

  cd openSUSE:Tools/obs-server
  osc add *
  osc ci

The rebuild will automatically be triggered.  Monitor the build status
here:

  http://127.0.42.1/project/monitor?project=openSUSE%3ATools

6.2. Run and Stop the Service
=============================

To start and stop everything you can use the following command sequences:

  rcmysql start
  rcobsrepserver start
  rcobssrcserver start
  rcobsscheduler start
  rcobsworker start
  rcobsdispatcher start
  rcobspublisher  start
  rclighttpd start

  rclighttpd stop
  rcobspublisher  stop
  rcobsdispatcher stop
  rcobsworker stop
  rcobsscheduler stop
  rcobssrcserver stop
  rcobsrepserver stop
  rcmysql stop


To automatically start everything at system boot you can use the following:

  chkconfig --add \
	mysql  obssrcserver  obsrepserver \
	obsscheduler  obspublisher  obsdispatcher \
	obsworker  \
	lighttpd 

Use chkconfig --del analogously to no longer automatically start them
at boot.

7. Feedback
===========

Please send feedback about this file or the packages to
opensuse-buildservice@suse.de

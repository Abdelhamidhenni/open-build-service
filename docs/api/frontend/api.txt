= openSUSE API

Version: 0.1

  Only authenticated users are allowed to acces the API. Authentication is done
  by sending a Basic HTTP Authorisation header.

<project>: Project name
<package>: Package name
<platform>: Platform name

  All names aren't allowed to contain spaces, slashes or colons.

== Table of Contents

Contents:

== About

Host: api.opensuse.org

GET /about

  Get information about API.

XmlResult: about


== Sources

Host: api.opensuse.org

=== Project meta data


GET /source/

  Read list of projects.
  
XmlResult: projects directory.xsd


GET /source/<project>/_meta

  Read project meta file.

XmlResult: project


PUT /source/<project>/_meta

  Write project meta file.

XmlBody: project

XmlResult: status


=== Package meta data


GET /source/<project>/<package>/_meta

  Read project meta data.

XmlResult: package


PUT /source/<project>/<package>/_meta

  Write project meta data. Writing of the project meta data commits the packages
  contained in the project to the build backend.

XmlBody: package

XmlResult: status


=== Delete projects ===


DELETE /source/<project>

  Deletes specified project. All packages of this project are deleted as if a
  DELETE request were issued for each package.

XmlResult: status


=== Delete packages ===


DELETE /source/<project>/<package>

  Deletes specified package including all source files

XmlResult: status


=== Other source files

<filename>: File name


GET /source/<project>/<package>

  Get directory listing of all source files in the package
  Parameters: rev=<revision>


GET /source/<project>/<package>/<filename>

  Read source file.

Result: Content of file


PUT /source/<project>/<package>/<filename>

  Write source file.

Body: Content of file

XmlResult: status


DELETE /source/<project>/<package>/<filename>

  Delete source file.

XmlResult: status


=== RPM spec file template

POST /source/<project>/<package>?cmd=createSpecFileTemplate

  Create template for RPM SPEC file. Returns an error, if the SPEC file already
  exists.

XmlResult: status


=== Trigger rebuild

POST /source/<project>/<package>?cmd=rebuild

  Triggers package rebuild for all repositories/architectures of the package

XmlResult: status


=== Commit changes

POST /source/<project>/<package>?cmd=commit&rev=<revision>&comment=<comment>&user=<user>

  Commits package changes to buildservice

XmlResult: status


== Platform data

Host: api.opensuse.org

GET /platform/
  
  List all platforms
  
XmlResult: directory


== User data

Host: api.opensuse.org

<userid>: Id of user


GET /person/<userid>

  Read user data.
  
XmlResult: user
  

PUT /person/<userid>

  Write user data.
  
XmlBody: user
  
XmlResult: status


== RPMs

Host: api.opensuse.org


GET /rpm/<project>/<platform>/<package>/<arch>/<rpmname>

  Get RPM.

Result: RPM


GET /rpm/<project>/<repo>/<arch>/<package>/history

  Get build history

XmlResult: buildhistory


GET /rpm/<project>/<repo>/<arch>/<package>/buildinfo

  Get build information for local building

XmlResult: buildinfo


POST /rpm/<project>/<repo>/<arch>/<package>/buildinfo

  Get build info for local building using the POSTed specfile

Body: specfile

XmlResult: buildinfo


GET /rpm/<project>/<repo>/<arch>/<package>/status

  Get build status of the specified project/package/repo/arch combination

XmlResult: buildstatus


== Build Results (Legacy)

Host: api.opensuse.org


GET /result/<project>/<platform>/result

  Read project summary result.

XmlResult: projectresult


GET /result/<project>/<platform>/<package>/result

  Read package result.

XmlResult: packageresult


GET /result/<project>/<platform>/<package>/<arch>/log

  Read build log.
  
Result: Build log as text file.


== Build Results

Host: api.opensuse.org

<repository>: Build repository

GET /build/<project>/<repository>/<arch>/<package>/<rpmname>

  Get RPM.

Result: RPM


GET /build/<project>/<repository>/<arch>/<package>/_history

  Get build history

XmlResult: buildhistory


GET /build/<project>/<repository>/<arch>/<package>/_buildinfo

  Get build information for local building

XmlResult: buildinfo


POST /build/<project>/<repository>/<arch>/<package>/_buildinfo

  Get build info for local building using the POSTed specfile

Body: specfile

XmlResult: buildinfo


GET /build/<project>/<repository>/<arch>/<package>/_status

  Get build status of the specified project/package/repo/arch combination

XmlResult: buildstatus


GET /build/<project>/<repository>/<arch>/<package>/_log

  Read build log.
  
Result: Build log as text file.


POST /build/<project>?cmd=rebuild

  Triggers package rebuild for the repositories/architectures of the package
  specified by the parameters. If no parameters are given, all packages of the
  project are completely rebuilt.

Parameters:
  
  package: package name, optional, multiple
  arch: architecture, optional, multiple
  repository: name of repository, optional, multiple

XmlResult: status


GET /build/<project>/_result

  Return build results for the packages, architectures and repositories
  specified by the parameters. If no parameters are given, all results for the
  project are returned.
  
  The view parameter specifies which sections are included in the results.
  view=summary includes the summary of the status values. view=status includes
  detailed status information. view=binarylist includes the list of generated
  binary files. If no view parameter is given, view=status is assumed. To
  combine views the parameter can be given multiple times.

Parameters:
  
  package: package name, optional, multiple
  arch: architecture, optional, multiple
  repository: name of repository, optional, multiple
  view: summary | status | binarylist

XmlResult: buildresult


=== Repository Information

GET /build/<project>/<repository>/<arch>/_buildinfo

  ???

GET /build/<project>/<repository>/<arch>/_buildconfig

  ???

GET /build/<project>/<repository>/<arch>/_binarylist

  ???

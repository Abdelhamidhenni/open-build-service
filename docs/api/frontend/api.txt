= openSUSE API

Version: 0.1

  Only authenticated users are allowed to acces the API. Authentication is done
  by sending a Basic HTTP Authorisation header.

<project>: Project name
<package>: Package name
<platform>: Platform name

  All names aren't allowed to contain spaces, slashes or colons.

== Table of Contents

Contents:

== About

Host: api.opensuse.org

GET /about

  Get information about API.

XmlResult: about


== User data

Host: api.opensuse.org

<userid>: Id of user


GET /person/<userid>

  Read user data.
  
XmlResult: user
  

PUT /person/<userid>

  Write user data.
  
XmlBody: user
  
XmlResult: status


== Sources

Host: api.opensuse.org

=== Projects


GET /source/

  Read list of projects.
  
XmlResult: projects directory.xsd


GET /source/<project>/_meta

  Read project meta file.

XmlResult: project


PUT /source/<project>/_meta

  Write project meta file.

XmlBody: project

XmlResult: status


DELETE /source/<project>

  Deletes specified project. All packages of this project are deleted as if a
  DELETE request were issued for each package.

XmlResult: status


GET /source/<project>/_config

  Read project configuration

Result: configuration as text/plain


PUT /source/<project>/_config

  Change project configuration

XmlResult: status


GET /source/<project>/_pattern

  Get list of all patterns set up for this project

XmlResult: directory


GET /source/<project>/_pattern/<patternfile>

  Get pattern

XmlResult: pattern


PUT /source/project/_pattern/<patternfile>

  Write pattern

XmlBody: pattern

XmlResult: status


=== Packages


GET /source/<project>/<package>/_meta

  Read project meta data.

XmlResult: package


PUT /source/<project>/<package>/_meta

  Write project meta data. Writing of the project meta data commits the packages
  contained in the project to the build backend.

XmlBody: package

XmlResult: status


DELETE /source/<project>/<package>

  Deletes specified package including all source files

XmlResult: status


POST /source/<project>/<package>?cmd=diff

  Create a source diff

Parameters:

  rev: revision of new package, optional
  oproject: old project, optional
  opackage: old package, optional
  orev: old revision, optional

Result: diff as text/plain


GET /source/<project>/<package>/_history

  Get package commit history

XmlResult: revisionlist


=== Source files

<filename>: File name


GET /source/<project>/<package>

  Get directory listing of all source files in the package
  
Parameters: 
  
  rev: revision, optional


GET /source/<project>/<package>/<filename>

  Read source file.

Result: Content of file


PUT /source/<project>/<package>/<filename>

  Write source file.

Body: Content of file

XmlResult: status


DELETE /source/<project>/<package>/<filename>

  Delete source file.

XmlResult: status


=== RPM spec file template

POST /source/<project>/<package>?cmd=createSpecFileTemplate

  Create template for RPM SPEC file. Returns an error, if the SPEC file already
  exists.

XmlResult: status


=== Commit changes

POST /source/<project>/<package>?cmd=commit&rev=<revision>&comment=<comment>&user=<user>

  Commits package changes to buildservice

Parameters:

  rev: revision, mandatory
  comment: comment, optional
  user: user, optional

XmlResult: status


== Repository data

Host: api.opensuse.org

GET /repository/

  List all repositories

XmlResult: directory


GET /repository/<project>

  List all repositories of the specified project

XmlResult: directory


== Build Results

<repository>: Build repository

=== Binaries

GET /build/<project>/<repository>/<arch>/<package>

  Get list of binaries built by the sources of the given package

Result: binarylist


GET /build/<project>/<repository>/<arch>/<package>/<binaryname>

  Get single binary from build results of given package

Result: binary file


GET /build/<project>/<repository>/<arch>/_repository

  Get list of binaries in given repository (binaries produced by all packages
  of the project)

Result: binarylist


GET /build/<project>/<repository>/<arch>/_repository/<binaryname>

  Get single binary from the given repository

Result: binary file

=== Status

GET /build/<project>/_result

  Return build results for the packages, architectures and repositories
  specified by the parameters. If no parameters are given, all results for the
  project are returned.
  
  The view parameter specifies which sections are included in the results.
  view=summary includes the summary of the status values. view=status includes
  detailed status information. view=binarylist includes the list of generated
  binary files. If no view parameter is given, view=status is assumed. To
  combine views the parameter can be given multiple times.

Parameters:
  
  package: package name, optional, multiple
  arch: architecture, optional, multiple
  repository: name of repository, optional, multiple
  view: summary | status | binarylist

XmlResult: buildresult


GET /build/<project>/<repository>/<arch>/<package>/_history

  Get build history

XmlResult: buildhistory


GET /build/<project>/<repository>/<arch>/<package>/_status

  Get build status of the specified project/package/repo/arch combination

XmlResult: buildstatus


GET /build/<project>/<repository>/<arch>/<package>/_log

  Get build log.
  
Result: Build log as text file.


=== Control

POST /build/<project>?cmd=rebuild

  Triggers package rebuild for the repositories/architectures of the package
  specified by the parameters. If no parameters are given, all packages of the
  project are completely rebuilt.

  Possible values for the code parameter are:

  succeeded        - build succeeded
  failed           - build failed
  disabled         - build is disabled in package config
  excluded         - build is excluded in spec file
  scheduled        - package is ready to be built
  building         - package is building on a worker
  broken           - package source is bad (i.e. no specfile)
  expansion error  - build needs unavailable binary packages

Parameters:
  
  package: package name, optional, multiple
  arch: architecture, optional, multiple
  repository: name of repository, optional, multiple
  code: build status code, optional, multiple

XmlResult: status


POST /build/<project>?cmd=abortbuild

  Kill all running builds, marking them as failed

Parameters:

  see cmd=rebuild


POST /build/<project>?cmd=restartbuild

  Restart all running builds

Parameters:

  see cmd=rebuild


POST /build/<project>?cmd=wipe

  Delete all binary packages from the packages

Parameters:

  see cmd=rebuild


=== Local Build

GET /build/<project>/<repository>/<arch>/<package>/_buildinfo

  Get build information for local building

XmlResult: buildinfo


POST /build/<project>/<repository>/<arch>/<package>/_buildinfo

  Get build info for local building using the POSTed specfile

Body: specfile

XmlResult: buildinfo


=== Repository Information

GET /build/<project>/<repository>/<arch>/_all/

  Returns list of binaries contained in the specified repository

XmlResult: binarylist


GET /build/<project>/<repository>/<arch>/_all/<binaryname>

  Returns binary

Result: binary file


GET /build/<project>/<repository>/<arch>/_binarylist

  Returns list of binaries contained in the specified repository

XmlResult: binarylist


GET /build/<project>/<repository>/<arch>/_buildinfo

  ???

GET /build/<project>/<repository>/_buildconfig

  ???


== Search

GET /search/project

  Searches for project metadata using xpath. A xpath predicate has to be
  specified using the match parameter. The predicate will be used in this
  expression: /project[<match>]. Only complete meta files will be returned.

Parameters:

  match: xpath predicate, mandatory

XmlResult: collection


GET /search/project/id

  Searches for project metadata analogous to /search/project, only the root
  element is returned without any children.

Parameters:

  match: xpath predicate, mandatory

XmlResult: collection


GET /search/package

  Searches for packate metadata using xpath. A xpath predicate has to be
  specified using the match parameter. The predicate will be used in this
  expression: /package[<match>]. Only complete meta files will be returned.

Parameters:

  match: xpath predicate, mandatory

XmlResult: collection


GET /search/package/id

  Searches for package metadata analogous to /search/package, only the root
  element is returned without any children.

Parameters:

  match: xpath predicate, mandatory

XmlResult: collection


GET /search/published/binary/id

  Search for published binary packages

Parameters:

  match: xpath predicate, mandatory

XmlResult: collection


GET /search/published/pattern/id

  Search for published patterns

Parameters:

  match: xpath predicate, mandatory

XmlResult: collection


== Published binary package tree

GET /published

  List of published projects

XmlResult: directory


GET /published/<project>

  List of repositories of published projects

XmlResult: directory


GET /published/<project>/<repository>

  List of published repositories for the given project/repo

XmlResult: directory


GET /published/<project>/<repository>/<arch>

  List of published binaries for the given project/repo/arch

XmlResult: directory


GET /published/<project>/<repository>/<arch>/<binary>

  Download published binary
  NOTE: use this only if you absolutely have to as it doesn't use
        the redirector

Result: binary


GET /published/<project>/<repository>/<arch>/<binary>?view=ymp

  Generate an ymp pattern that includes the needed repositories to install the
  given binary

XmlResult: ymp


== Tags
 
GET /source/<project>/_tags
	
  Get tags by project.
  
XmlResult: tags

GET /source/<project>/<package>/_tags

  Get tags by package.
  
XmlResult: tags

GET /tag/<tag>/_projects

  Get projects by tag(s). 
  For selection by more than one tag use TagA::TagB for example.  
	
XmlResult: collection_objects_by_tag
  
GET /tag/<tag>/_packages

  Get packages by tag.
	  
XmlResult: collection_objects_by_tag

GET /tag/<tag>/_all

  Get projects and packages by tag.

XmlResult: collection_objects_by_tag

GET /user/<user>/tags/_projects

  Get all projects including tags assigned by the user

XmlResult: collection_objects_with_tags_by_user
 
GET /user/<user>/tags/_packages

  Get all packages including tags assigned by the user

XmlResult: collection_objects_with_tags_by_user 
 
GET /user/<user>/tags/_tagcloud

Parameters: 
			distribution=linear | logarithmic | raw
			steps=[1..100]
			limit=[0..] (default = 100, 0 = no limit)

  Get a tag cloud from the tags used by the user.
 
XmlResult: tagcloud

GET /tag/_tagcloud

Parameters: 
			distribution=linear | logarithmic | raw
			steps=[1..100]
			limit=[0..] (default = 100, 0 = no limit)
			
  Get a tag cloud including all tags.
	
XmlResult: tagcloud

GET user/<user>/tags/<project>

  Get tags by user and project.
	
XmlResult: tags

PUT user/<user>/tags/<project>

  Write tags by user and project.

XmlBody: tags

XmlResult: status
	
GET user/<user>/tags/<project>/<package>

  Get tags by user and package.
	
XmlResult:	tags

PUT user/<user>/tags/<project>/<package>

  Write tags by user and package.

XmlBody: tags

XmlResult: status


== Platform data (Legacy)

Host: api.opensuse.org

GET /platform/
  
  List all platforms
  
XmlResult: directory


== Build Results (Legacy)

  This section describes the obsolete API for build results. It will be replaced
  by the API available under /build.

=== RPMs

Host: api.opensuse.org


GET /rpm/<project>/<platform>/<package>/<arch>/<rpmname>

  Get RPM.

Result: RPM


GET /rpm/<project>/<repo>/<arch>/<package>/history

  Get build history

XmlResult: buildhistory


GET /rpm/<project>/<repo>/<arch>/<package>/buildinfo

  Get build information for local building

XmlResult: buildinfo


POST /rpm/<project>/<repo>/<arch>/<package>/buildinfo

  Get build info for local building using the POSTed specfile

Body: specfile

XmlResult: buildinfo


GET /rpm/<project>/<repo>/<arch>/<package>/status

  Get build status of the specified project/package/repo/arch combination

XmlResult: buildstatus


=== Build Results

Host: api.opensuse.org


GET /result/<project>/<platform>/result

  Read project summary result.

XmlResult: projectresult


GET /result/<project>/<platform>/<package>/result

  Read package result.

XmlResult: packageresult


GET /result/<project>/<platform>/<package>/<arch>/log

  Read build log.
  
Result: Build log as text file.



== Statistics

Host: api.opensuse.org
<limit>: limit count of results. optional, defaults to 10.
<group_by>: group results by: project, package, repo or arch.
<type>: can be projects or packages. optional, defaults to packages


GET /statistics/latest_added?limit=<limit>
  Get a list of packages and projects (mixed) latest added to the build
  service. All entries are sorted by creation time.
XmlResult: latest_added


GET /statistics/added_timestamp/<project>/<package>
  Get timestamp when project or package was added to the build service.
XmlResult: added_timestamp


GET /statistics/latest_updated?limit=<limit>
  Get a list of packages and project that were last updated. All entries are
  sorted by the update timestamp.
XmlResult: latest_updated


GET /statistics/updated_timestamp/<project>/<package>
  Get timestamp when project or package was last updated.
XmlResult: updated_timestamp


GET /statistics/activity/<project>/<package>
  Get activity in % of project or package.
XmlResult: activity


GET /statistics/most_active?type=<type>&limit=<limit>
  Get list of most active packages (type=packages) or projects (type=projects).
  Also returns count of updates since package was created when type=packages.
  Also returns count of packages that are in this project when type=projects.
XmlResult: most_active


GET /statistics/highest_rated?limit=<limit>
  Get list of highest rated projects and packages. Results are sorted by score.
  Only items with more than 3 ratings will show up in this list.
XmlResult: highest_rated


GET /statistics/rating/<project>/<package>
  Get rating of a specific project or package. Also returns what score the
  logged in user gave and how many ratings there are already for the specified
  object.
XmlResult: rating


PUT /statistics/rating/<project>/<package>
  Rate this project / package.
XmlResult: rating


GET /statistics/download_counter?limit=<limit>
  Get download counters for top downloaded files including to which project,
  package, repository and architecture they belong.
XmlResult: download_counter


GET /statistics/download_counter?group_by=<group_by>&limit=<limit>
  Get summarized download counters for top downloaded projects, packages,
  repositories or architectures (by setting group_by parameter to project,
  package, repo or arch) including count of files that belong to the respective
  object.
XmlResult: download_counter_summary


PUT /statistics/redirect_stats
  Send download statistics from the openSUSE download redirector to the build
  service api, to update the download_counter database.
  User needs to have appropriate permissions.
XmlResult: redirect_stats


== Status Messages

Host: api.opensuse.org
<limit>: limit count of messages. optional, defaults to unlimited.


GET /status_message/?limit=<limit>
  Get a list of status messages.
XmlResult: status_messages


PUT /status_message/
  Send a new status message to the build service. User needs to have
  appropriate permissions.
XmlResult: status_message


== Messages (for projects/packages)

Host: api.opensuse.org
<id>: message id
<limit>: limit count of messages. optional, defaults to unlimited.


GET /message/<id>
  Get (one) message specified by id.
XmlResult: messages


GET /message/?limit=<limit>
  Get a list of messages, independent of project or package.
  All entries are ordered by creation time (latest first).
XmlResult: messages


GET /message/?project=<project>
  Get a list of messages for this package.
  All entries are ordered by creation time (latest first).
XmlResult: messages


GET /message/?project=<project>&package=<package>
  Get a list of messages for this package.
  All entries are ordered by creation time (latest first).
XmlResult: messages


PUT /message/?project=<project>&package=<package>
  Append message to the specified package (or project, if package parameter
  is omitted).
XmlResult: message



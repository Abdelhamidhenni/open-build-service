<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.docbook.org/xml/4.4/docbookx.dtd"
[
 <!ENTITY % entities SYSTEM "entity-decl.ent">
 %entities;
]>

<!--
 ***************************************************
 Please see license.xml for this document's license.
 ***************************************************
-->

<sect1 id="sec.commandline.example" xml:base="commandline_example.xml">
 <title>Setting up a Project with the Command Line Client</title>
 <abstract>
  <para>
   Every package in the &bs; resides in a different directory.
   To actually use the &bs;, you must inform it about the package and
   do a checkin.
  </para>
 </abstract>
 <sect2 id="sec.commandline.example.foo">
  <title>Creating a Package</title>
  <para>
   Lets assume, that you already created all the necessary files to
   build a package. To add this to the &bs;, use the following
   procedure:
  </para>
  <procedure>
   <step>
    <para>
     Change the working directory to the directory where you keep all
     your &bs; projects.
    </para>
   </step>
   <step>
    <para>
     Create a directory for the new package. This should have the same
     name as the package.
    </para>
   </step>
   <step>
    <para>
     Copy all the files that are necessary to build the package into
     that directory.
    </para>
   </step>
   <step>
    <para>
     Run the command 
    </para>
    <screen>osc createpackage &lt;home project&gt; &lt;package name&gt;</screen>
    <para>
     In this case, <quote>home project</quote> is the string
     <quote>home:&lt;your username&gt;</quote> and <quote>package
      name</quote> is the directory name of your newly create package.
    </para>
   </step>
   <step>
    <para>
     Make your package known to the &bs;. The easiest way to do this
     is the command:
    </para>
    <screen>osc addremove &lt;package name&gt;</screen>
    <para>
     All of the files that reside in your package directory should be
     added to the repository.
    </para>
   </step>
   <step>
    <para>
     Do a checkin of all the newly added files:
    </para>
    <screen>osc ci &lt;package name&gt;</screen>
   </step>
  </procedure>
 </sect2>
 <sect2>
  <title>Modifying the Distribution List</title>
  <para>
   By default, your package will be built for the latest stable
   release of openSUSE. Sometimes it is necessary, to build the
   package with other build repositories, for example, if you want to use
   the &bs; to also build for other distributions, or to create a
   distribution of your own.
  </para>
  <para>
   To add build your package for a special project, you have to add
   the project to your repository list. In fact, with that process you
   create a new repository that in turn may be used as base for other
   projects. All repository entries have the following structure:
  </para>
  <screen>&lt;repository name="project_name"<co id="co.rep.name"/>&gt;
 &lt;path project="base_project"<co id="co.rep.base"/> repository="used_repository"<co id="co.rep.used"/>/&gt;
 &lt;arch&gt;architecture&gt;/arch&gt;<co id="co.rep.arch"/>
&lt;/repository&gt;</screen>
  <calloutlist>
   <callout arearefs="co.rep.name">
    <para>
     The <quote>project_name</quote> is just a name that may be used
     to reference to your project. It must be set, but you can choose
     this value freely.
    </para>
   </callout>
   <callout arearefs="co.rep.base">
    <para>
     The <quote>base_project</quote> is the path to the project you
     want to build your package with. Any of the values listed in
     <command>osc ls</command> may be used there.
    </para>
   </callout>
   <callout arearefs="co.rep.used">
    <para>
     The <quote>used_repository</quote> must be one of the repository
     names that are defined in the <quote>used_repository</quote>. To
     get a list of the available names, use the command
    <command>osc meta &lt;base_project&gt;</command>
    </para>
   </callout>
   <callout arearefs="co.rep.arch">
    <para>
     The <quote>architecture</quote> must be available in the list of
     architectures of the <quote>used_repository</quote>.
    </para>
   </callout>
  </calloutlist>
  
  <para>
   The command <command>osc editmeta &lt;home project&gt;</command>
   may be used to edit your local distribution defines. However, to
   do this, you must edit the xml source of the metadata. For example,
   if you want to add the <quote>openSUSE 10.1 i586</quote>
   distribution to your own project, you may add the following lines
   after the already existing repository entry:
  </para>
  <screen>&lt;repository name="SUSE_Linux_10.1"&gt;
 &lt;path project="SUSE:SL-10.1" repository="standard"/&gt;
 &lt;arch&gt;i586&gt;/arch&gt;
&lt;/repository&gt;</screen>
 </sect2>
 <sect2>
  <title>Building the Package</title>
  <para>
   After you submit your package files to the &bs;, the package is
   automatically scheduled for a build. If you want to enforce a
   rebuild, you may use the command 
  </para>
  <screen>osc rebuildpac &lt;home project&gt; &lt;package name&gt;</screen>
 </sect2>
 <sect2>
  <title>Results</title>
  <para>
   After your build finished, you can check the state of the package
   with the command <command>osc results &lt;package name&gt;</command>
  </para>
  <para>
   To get the actual build log, you have to change your working
   directory into the package directory and use the command
  </para>
  <screen>osc log PLATFORM ARCH</screen>
  <para>
   For example, if you want to see the build log of your package for
   the distribution openSUSE_10.2 when it was built for the
   architecture i586, use the command <command>osc log openSUSE_10.2
    i586</command>. The output of this command can be quite lengthy,
   and it is a good idea to pipe the result to a pager like less or
   into a file.
  </para>
 </sect2>
 <sect2>
  <title>For More Information</title>
  <para>
   All the information sources that are available for the web client as
   described at <xref linkend="sec.webclient.project.moreinfo"/> also
   provide information for osc. 
  </para>
  <para>
   In addition to that, you may use the command <command>osc
    help</command> to get some help texts to osc. The help texts of
   commands are always gained with the command <command>osc help
    &lt;command&gt;</command>.
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
coding:utf-8
mode:xml
sgml-indent-step:1
sgml-omittag:nil
sgml-shorttag:nil
End:
-->

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.docbook.org/xml/4.4/docbookx.dtd"
[
 <!ENTITY % entities SYSTEM "entity-decl.ent">
 %entities;
]>

<!--
 ***************************************************
 Please see license.xml for this document's license.
 ***************************************************
-->

<sect1 id="sec.kiwi.activating" xml:base="kiwi_activating.xml">
 <title>Activating an Image</title>
 <para>After you create a logical extend (an image) from a physical extend, you can use any of the
  following methods to activate or deploy the image:</para>
 <itemizedlist mark="bullet" spacing="normal">
  <listitem>
   <para>On a <emphasis>local system,</emphasis> you can install the image by using the
    <command>dd</command> command to dump the image file on a previously created partition onto a
    local hard disk. To activate the system, use a boot manager such as GRUB or LILO. A USB stick
    system is also considered to be a local system, which KIWI supports with the
    <option>--bootstick</option> option.</para>
  </listitem>
  <listitem>
   <para>For a <emphasis>network enabled system</emphasis> (netboot client), use a special boot
    image to install the image. The boot image, which serves as the initial ramdisk
     (<filename>initrd</filename>), and the appropriate kernel are downloaded from a network
    service. The Linux kernel then automatically calls a program named <command>linuxrc</command>,
    which downloads and installs the system image. The installation can be done persistently on
    disk, or temporarily into the RAM of the machine. PXE is the network boot protocol supported by
    KIWI.</para>
  </listitem>
  <listitem>
   <para>For a <emphasis>paravirtualized target system</emphasis> such as Xen, install the image by
    copying the image file and the KIWI-created Xen configuration file onto the target system. To
    activate the virtual system, use the <command>xm create -c
     &lt;<replaceable>xen_config_file</replaceable>></command> command.</para>
  </listitem>
  <listitem>
   <para>For a <emphasis>full virtualized target system</emphasis> such as VMware or QEMU, the image
    represents a virtual disk which can be &lt;quote>played&lt;/quote> by the virtualization
    system.</para>
  </listitem>
 </itemizedlist>
 <para>With all of these activation methods, a special image, called a boot image, controls the
  activation or deployment process. The following sections explain the KIWI boot images in more
  detail.</para>
 <itemizedlist role="subtoc">
  <listitem>
   <para>
    <xref linkend="sec.kiwi.activating.netboot" xrefstyle="SectTitleOnPage"/>
   </para>
  </listitem>
  <listitem>
   <para>
    <xref linkend="sec.kiwi.activating.isoboot" xrefstyle="SectTitleOnPage"/>
   </para>
  </listitem>
  <listitem>
   <para>
    <xref linkend="sec.kiwi.activating.vmxboot" xrefstyle="SectTitleOnPage"/>
   </para>
  </listitem>
  <listitem>
   <para>
    <xref linkend="sec.kiwi.activating.oemboot" xrefstyle="SectTitleOnPage"/>
   </para>
  </listitem>
  <listitem>
   <para>
    <xref linkend="sec.kiwi.activating.xenboot" xrefstyle="SectTitleOnPage"/>
   </para>
  </listitem>
  <listitem>
   <para>
    <xref linkend="sec.kiwi.activating.usbboot" xrefstyle="SectTitleOnPage"/>
   </para>
  </listitem>
 </itemizedlist>
 <sect2 id="sec.kiwi.activating.netboot">
  <title>The KIWI Netboot Image</title>
  <para> The KIWI netboot boot image is used to install an operating system image on a network
   client. To establish communication with the client, a boot server infrastructure with the
   following services is required:</para>
  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>A DHCP server to provide an IP address for the client.</para>
   </listitem>
   <listitem>
    <para>A TFTP server to allow file transfers to and from the client.</para>
   </listitem>
  </itemizedlist>
  <sect3 id="sec.kiwi.activating.netboot.process">
   <title>The Netboot System Boot Process</title>
   <para> The following figure illustrates a simplified netboot client boot process: </para>
   <figure id="fig.kiwi.activating.netboot.process">
    <title>The Boot Process of a Netboot Client</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata width="75%" fileref="nbboot.svg" format="SVG"/>
     </imageobject>
     <imageobject role="html">
      <imagedata width="75%" fileref="nbboot.png" format="PNG"/>
     </imageobject>
    </mediaobject>
   </figure>
   <para>If the system can boot via a network, it loads the kernel and the compressed boot image
    from the network. The <quote>brain</quote> of the boot image is the <command>linuxrc</command>
    script, which does everything controlled by an image configuration file (also obtained from the
    network), including downloading and activating the operating system image. The boot image is
    exchanged for the operating system image to be activated.</para>
   <para>The following overview describes the steps that take place when the netboot client is
    booted:</para>
   <orderedlist spacing="normal">
    <listitem>
     <para>The client boots the initrd (<filename>initrd.gz</filename>), which is served by the TFTP
      server, via PXE network boot or boot manager (GRUB). </para>
     <para>If a PXE boot is not possible, the client tries to boot from a local hard disk.</para>
    </listitem>
    <listitem>
     <para>The <command>linuxrc</command> command is run, which starts the following process:</para>
     <orderedlist spacing="normal">
      <listitem>
       <para>The file systems required to receive system data are mounted (for example, the
         <filename>/proc</filename> file system).</para>
      </listitem>
      <listitem>
       <para>The kernel parameters are imported. If there is an IMAGE parameter, it is assumed the
        system boots locally, and the <option>LOCAL_BOOT</option> variable is set.</para>
      </listitem>
      <listitem>
       <para>If <option>LOCAL_BOOT</option> is not set, network support is activated. The network
        card is probed using the <command>hwinfo</command> command. The appropriate module is loaded
        using <command>modprobe</command>. Any dependencies to other modules is resolved.</para>
      </listitem>
      <listitem>
       <para>If <option>LOCAL_BOOT</option> is not set, the network interface is set up via DHCP.
        After the interface has been established, the DHCP variables are exported into the
         <filename>/var/lib/dhcpcd/dhcpcd-eth0.info</filename> file, and the contents of DOMAIN and
        DNS are used to generate a <filename>/etc/resolv.conf</filename> file.</para>
      </listitem>
      <listitem>
       <para>If <option>LOCAL_BOOT</option> is not set, the TFTP server address is acquired. During
        this step, a check is made to see if the kiwitftp <option>kernel</option> parameter is set.
        If it is not set, a check is made to determine if the host name tftp.$DOMAIN can be
        resolved. If both tests fail, the DHCP server is used as the TFTP server. For more
        information about the TFTP server structure, see <xref
         linkend="sec.kiwi.activating.netboot.tftp" xrefstyle="HeadingOnPage"/>.</para>
      </listitem>
      <listitem>
       <para>If <option>LOCAL_BOOT</option> is not set, the configuration file is loaded from the
         <filename>/srv/tftpboot/KIWI</filename> server directory via TFTP. At this point, the
        client expects the <filename>config.&lt;<replaceable>MAC
        Address</replaceable>></filename> file to be available. If this file is not available, a
        search is made for <filename>config.&lt;<replaceable>HEX-IP</replaceable>></filename>.
         <replaceable>HEX-IP</replaceable> is the IP address of the client, with each part of an
        IPv4 address converted into a hexadecimal value. If this file is not available, the IP
        address search checks only three out of four IP tokens, then two out of four, and so on. If
        still no file is found, a final search is made for a file named
        <filename>config.default</filename>. If this file is not available, it is assumed that the
        client did not existed before and can therefore be immediately registered by uploading a
        control file to the <filename>/srv/tftpboot/upload</filename> directory on the TFTP server.
        After the upload, the client branches off into a loop in which the following steps are
        taken:</para>
       <itemizedlist mark="bullet" spacing="normal">
        <listitem>
         <para>The DHCP lease file is restarted (<command>dhcpcd -n</command>).</para>
        </listitem>
        <listitem>
         <para>A new attempt is made to load the <filename>config.&lt;<replaceable>MAC
           Address</replaceable>></filename> file from the TFTP server.</para>
        </listitem>
        <listitem>
         <para>If the file does not exist, there is a 60 second time-out before a new run
         begins.</para>
        </listitem>
       </itemizedlist>
       <para>If the configuration file does load, it contains data on image, configuration,
        synchronization, or partition parameters. For more information on the configuration file
        format, see <xref linkend="sec.kiwi.activating.netboot.configfile" xrefstyle="HeadingOnPage"
        />.</para>
      </listitem>
      <listitem>
       <para>All registered kernel modules are loaded. The kernel provides a system that checks for
        a module alias registered automatically by the kernel during boot time. If such an alias
        matches the modinfo information from a kernel module, it is loaded.</para>
      </listitem>
      <listitem>
       <para>If <option>LOCAL_BOOT</option> is not set, the <literal>PART:</literal> line in the
        configuration is analyzed. If it is found, a check is performed to see if any local systems
        need to be updated. If not, the local boot process continues immediately and no image
        download occurs. If an update is required, or no operating system is found, the client's
        hard disk is partitioned.</para>
      </listitem>
      <listitem>
       <para>If <option>NFSROOT</option>, <option>NBDROOT</option>, and <option>LOCAL_BOOT</option>
        are not set, the images are downloaded with TFTP. If <option>LOCAL_BOOT</option> is set,
        this part of the initrd only reads the IMAGE information for later usage. If
        <option>NFSROOT</option> is set, the image root device is set to a remote NFS path. If
         <option>NBDROOT</option> is set, the nbd kernel module is loaded, and the nbd-client
        program sets up a new network block device called <filename>/dev/nd0</filename>. The image
        root device is then set to the network block device.</para>
      </listitem>
      <listitem>
       <para>If <option>LOCAL_BOOT</option> is not set, the checksums are checked. If the check
        fails, another download attempt is started.</para>
      </listitem>
      <listitem>
       <para>If <option>LOCAL_BOOT</option> is not set, a check for is made for
         <option>RELOAD_CONFIG</option>.</para>
      </listitem>
      <listitem>
       <para>The operating system image is mounted.</para>
      </listitem>
      <listitem>
       <para>If <option>LOCAL_BOOT</option> is not set, the CONF: line is evaluated. All the
        specified files are loaded from the TFTP server and stored in a
        <filename>/config/</filename> path. The <literal>KIWI_INITRD:</literal> line is also
        evaluated. The specified initrd file is downloaded from the TFTP server and stored in the
        system image as <filename>/boot/initrd</filename>.</para>
      </listitem>
      <listitem>
       <para>If <option>LOCAL_BOOT</option> is not set, all the user-land processes based on the
        boot image (<command>dhcpcd -k</command>) are terminated.</para>
      </listitem>
      <listitem>
       <para>The contents of the <option>COMBINED_IMAGE</option> variable is evaluated to determine
        if the image is a splitted image. Both image parts are combined into one system by creating
        the appropriate filesystem links.</para>
      </listitem>
      <listitem>
       <para>If <option>LOCAL_BOOT</option> is not set, the filesystem type of the system image and
        the available kernels are determined.</para>
      </listitem>
      <listitem>
       <para>If <option>LOCAL_BOOT</option> is not set, the <filename>/etc/fstab</filename>,
         <filename>/boot/grub/menu.lst</filename>, <filename>/etc/grub.conf</filename>, and
         <filename>/etc/sysconfig/kernel</filename> configuration files are created.</para>
      </listitem>
      <listitem>
       <para>If <option>LOCAL_BOOT</option> is not set, the configuration files stored in the
         <filename>/config/</filename>directory are copied into the mounted operating system
       image.</para>
      </listitem>
      <listitem>
       <para>The system switches to the mounted operating system image. The root file system is
        converted to the operating system image via the <command>pivot_root</command> or
         <command>mount <option>--move</option></command> command. All required configuration files
        are now present, either because they had been stored in the operating system image, or
        because they have been downloaded via TFTP.</para>
      </listitem>
      <listitem>
       <para>The boot image is unmounted using the <command>exec umount</command> command.</para>
      </listitem>
      <listitem>
       <para>At the termination of the <command>linuxrc</command> or <command>exec</command>
        command, the kernel initiates the <command>init</command> process, which starts processing
        the boot scripts as specified in <filename>/etc/inittab</filename> (for example, to
        configure the network interface).</para>
      </listitem>
     </orderedlist>
    </listitem>
   </orderedlist>
  </sect3>
  <sect3 id="sec.kiwi.activating.netboot.tftp">
   <title>The TFTP Server Structure</title>
   <para>The TFTP server directory structure is divided into the following areas:</para>
   <variablelist>
    <varlistentry id="bc45kdf">
     <term>Image configurations</term>
     <listitem>
      <para>The <filename>/srv/tftpboot/KIWI/</filename> directory contains the various
         <filename>config.&lt;<replaceable>MAC Address</replaceable>></filename> image
       configuration files.</para>
     </listitem>
    </varlistentry>
    <varlistentry id="bc45l6r">
     <term>Configuration files</term>
     <listitem>
      <para>The<filename> /srv/tftpboot/KIWI/&lt;<replaceable>MAC
       Address</replaceable>>/</filename> directory contains the various system configuration files,
       such as <filename>xorg.conf</filename>.</para>
     </listitem>
    </varlistentry>
    <varlistentry id="bc45le9">
     <term>Boot files</term>
     <listitem>
      <para>The <filename>/srv/tftpboot/boot/</filename> directory contains the
       <filename>initrd.gz</filename> and the kernel to boot.</para>
     </listitem>
    </varlistentry>
    <varlistentry id="bc45lea">
     <term>PXE second stage boot loaders</term>
     <listitem>
      <para>The <filename>/srv/tftpboot/</filename> directory contains the boot loaders for PXE
        (<filename>pxelinux.0</filename> and <filename>mboot.c32</filename>).</para>
     </listitem>
    </varlistentry>
    <varlistentry id="bc45leb">
     <term>PXE configuration file</term>
     <listitem>
      <para>The <filename>/srv/tftpboot/pxelinux.cfg</filename> file specifies the location of the
       PXE configuration file.</para>
     </listitem>
    </varlistentry>
    <varlistentry id="bc45lec">
     <term>Images files and checksums</term>
     <listitem>
      <para>The <filename>/srv/tftpboot/image/</filename> directory contains the image files and
       their checksums.</para>
     </listitem>
    </varlistentry>
    <varlistentry id="bc45led">
     <term>Upload area</term>
     <listitem>
      <para>The <filename>/srv/tftpboot/upload/</filename> directory is where the
         <filename>hwtype.&lt;<replaceable>MAC Address</replaceable>></filename> files for
       registering new netboot clients are uploaded.</para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect3>
  <sect3 id="sec.kiwi.activating.netboot.configfile">
   <title>The Netboot Client Configuration File <filename>config.<replaceable>&lt;MAC
      Address&gt;</replaceable></filename></title>
   <para> The <filename>config.<replaceable>&lt;MAC Address&gt;</replaceable></filename>
    configuration file contains data about image, configuration, synchronization, and partition
    parameters. The configuration file is loaded from the TFTP server directory
     <filename>/srv/tftpboot/KIWI</filename> via TFTP for previously installed netboot clients. New
    netboot clients are immediately registered, and a new configuration file with the corresponding
    MAC address is created.</para>
   <para> The following is an example of a cash register configuration file: </para>
   <screen>
IMAGE=/dev/hda2;image/browser;1.1.1;192.168.1.1;4096
CONF=/KIWI/00:30:05:1D:75:D2/ntp.conf;/etc/ntp.conf;192.168.1.1;1024,     \
     /KIWI/00:30:05:1D:75:D2/xorg.xonf;/etc/X11/xorg.xonf;192.168.1.1;1024
PART=200;S;x,300;L;/,500;L;/opt,x;L;/home
DISK=/dev/hda</screen>
   <para>The following format is used:</para>
   <simplelist>
    <member>
     <code>IMAGE=<replaceable>device;name;version;srvip;bsize;compressed,...</replaceable></code>
    </member>
    <member>
     <code>SYNC=<replaceable>syncfilename;srvip;bsize</replaceable></code>
    </member>
    <member>
     <code>CONF=<replaceable>src;dest;srvip;bsize,...,src;dest;srvip;bsize</replaceable></code>
    </member>
    <member>
     <code>PART=<replaceable>size;id;Mount,...,size;id;Mount</replaceable></code>
    </member>
    <member>
     <code>JOURNAL=<replaceable>ext3</replaceable></code>
    </member>
    <member>
     <code>DISK=<replaceable>device</replaceable></code>
    </member>
   </simplelist>
   <variablelist>
    <varlistentry>
     <term>
      <code>IMAGE</code>
     </term>
     <listitem>
      <para> Specifies which image (<literal>name</literal>) should be loaded with which version
        (<literal>version</literal>), and to which storage device (<literal>device</literal>) it
       should be linked to (for example, <filename>/dev/ram1</filename> or
       <filename>/dev/hda2</filename>). The netboot client partition (<literal>device</literal>)
        <systemitem>hda2</systemitem> defines the root file system <filename>/</filename>, and
        <systemitem>hda1</systemitem> is used for the swap partition. The numbering of the hard disk
       device should not be confused with the RAM disk device, where <filename>/dev/ram0</filename>
       is used for the initial RAM disk and cannot be used as a storage device for the second stage
       system image. We recommend using the device <filename>/dev/ram1</filename> for the RAM disk.
       If the hard drive is used, a corresponding partitioning must be performed. </para>
      <para>
       <literal>srvrip</literal> specifies the server IP address for the TFTP download. It must
       always be specified, except in <literal>PART</literal>. </para>
      <para>
       <literal>bsize</literal> specifies the block size for the TFTP download. It must always be
       specified, except in <literal>PART</literal>. If the block size is too small according to the
       maximum number of data packages (32768), <command>linuxrc</command> automatically calculates
       a new blocksize for the download. </para>
      <para>
       <literal>compressed</literal> specifies if the image file on the TFTP server is compressed.
       If <literal>compressed</literal> is not specified, the standard download workflow is used. </para>
      <note>
       <para> The download will fail if you specify <literal>compressed</literal> when the image is
        not compressed. It will also fail if you do not specify <literal>compressed</literal> when
        the image is compressed. The name of the compressed image must contain the suffix
         <filename>.gz</filename>, and it must be compressed with the <command>gzip</command> tool.
        Using a compressed image automatically deactivates the TFTP multicast download option.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <code>CONF</code>
     </term>
     <listitem>
      <para> Specifies a comma-separated list of source:target configuration files. The source
        (<literal>src</literal>) corresponds to the path on the TFTP server, and is loaded via TFTP.
       The download is made to the file on the netboot client indicated by the target
       (<literal>dest</literal>). </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <code>PART</code>
     </term>
     <listitem>
      <para> Specifies the partitioning data. The comma-separated list must contain the size
        (<literal>size</literal>), the type number (<literal>id</literal>), and the mount point
        (<literal>Mount</literal>). The size is measured by default in MB. All size specifications
       supported by the sfdisk program are also allowed. The type number specifies the ID of the
       partition. Valid ID's are listed via the <command>sfdisk
       <option>--list-types</option></command> command. Mount specifies the partition's mount point. </para>
      <itemizedlist>
       <listitem>
        <para> The first element of the list must define the swap partition. The swap partition must
         not contain a mount point. A lowercase letter <literal>x</literal> must be set instead.
        </para>
       </listitem>
       <listitem>
        <para> The second element of the list must define the <systemitem>root</systemitem>
         partition. </para>
       </listitem>
       <listitem>
        <para> If a partition should take all the space left on a disk, use a lowercase
         <literal>x</literal> letter as the size specification. </para>
       </listitem>
      </itemizedlist>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <code>DISK</code>
     </term>
     <listitem>
      <para> Specifies the hard disk. This is used only with PART, and it defines the device the
       hard disk can be addressed with (for example, <filename>/dev/hda</filename>). </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <code>RELOAD_IMAGE</code>
     </term>
     <listitem>
      <para> If set to a non-empty string, <code>RELOAD_IMAGE</code> forces the configured image to
       be loaded from the server even if the image on the disk is up-to-date. Used mainly for
       debugging purposes, this option makes sense only on diskful systems. </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <code>RELOAD_CONFIG</code>
     </term>
     <listitem>
      <para> If set to an non-empty string, <code>RELOAD_CONFIG</code> forces all configuration
       files to be loaded from the server. Used mainly for debugging purposes, this option makes
       sense only on diskful systems. </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <code>COMBINED_IMAGE</code>
     </term>
     <listitem>
      <para> If set to an non-empty string, <code>COMBINED_IMAGE</code> indicates that the two
       images specified must be combined into one bootable image. The first image defines the
       read-write part, and the second image defines the read-only part. </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <code>KIWI_INITRD</code>
     </term>
     <listitem>
      <para> Specifies the KIWI initrd to be used for a local boot of the system. The value must be
       set to the name of the initrd file which is used via PXE network boot. If the standard TFTP
       setup suggested with the kiwi-pxeboot package is used, all initrd files reside in the
        <filename>/srv/tftpboot/boot/</filename> directory. Because the TFTP server does a
        <command>chroot</command> into the TFTP server path, you must specify the initrd file as
       follows: </para>
      <screen>
KIWI_INITRD=/boot/<replaceable>&lt;name-of-initrd-file&gt;</replaceable></screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <code>NFSROOT</code>
     </term>
     <listitem>
      <para> For netboot images, you can mount the system image root filesystem remotely via NFS
       (Network File System). This means there is a server which exports the root filesystem of the
       network client in such a way that the client can mount it read/write. In order to do that,
       the boot image must know the server IP address and the path name where the root directory
       exists on this server. The information must be provided as in the following example: </para>
      <screen>
NFSROOT=<replaceable>&lt;NFS.Server.IP.address&gt;</replaceable>;<replaceable>&lt;/path/to/root/tree&gt;</replaceable>
</screen>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <code>NBDROOT</code>
     </term>
     <listitem>
      <para> For netboot images, you can mount the system image image root filesystem remotely via
       NBD (Network Block Device). This means there is a server which exports the root directory of
       the system image via a specified port. The kernel provides the block layer, together with a
       remote port that uses the <command>nbd-server</command> program. For more information on how
       to set up the server, see the nbd-server man pages. The kernel on the remote client can set
       up a special network block device named <command>/dev/nb0</command> using the
        <command>nbd-client</command> command. After this device exists, the
       <command>mount</command> program is used to mount the root filesystem. To allow the KIWI boot
       image to use that, the following information must be provided:
       <screen>
NBDROOT=<replaceable>&lt;NBD.Server.IP.address&gt;</replaceable>;<replaceable>&lt;NBD-Port-Number&gt;</replaceable>;/dev/<replaceable>&lt;NBD-Device&gt;</replaceable>
<replaceable>&lt;NBD-Swap-Port-Number&gt;</replaceable>;/dev/<replaceable>&lt;NBD-Swap-Device&gt;</replaceable>
</screen>
       The NBD-Device, NBD-Swap-Port-Number, and NBD-Swap-Device variables are optional. If they are
       not set, the default values are used (/dev/nb0 for the NBD-Device, port number 9210 for the
       NBD-Swap-Port-Number, and /dev/nb1 for the NBD-Swap-Device). The swap space over the network
       using a network block device is only established if the client has less than 48 MB of RAM.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <code>UNIONFS_CONFIG</code>
     </term>
     <listitem>
      <para> For netboot and usbboot images, you can use <systemitem>unionfs</systemitem> or
        <systemitem>aufs</systemitem> as a container filesystem in combination with a compressed
       system image. The recommended compressed filesystem type for the system image is
        <filename>squashfs</filename>. In case of a USB-stick system, the usbboot image
       automatically sets up the <systemitem>unionfs</systemitem>/<systemitem>aufs</systemitem>
       filesystem. For a PXE network image, the netboot image requires a
         <filename>config.<replaceable>&lt;MAC&gt;</replaceable></filename> configuration as
       in the following example: </para>
      <screen>
UNIONFS_CONFIG=/dev/sda2,/dev/sda3,aufs
</screen>
      <para> In this example, the first device <filename>/dev/sda2</filename> represents the
       read/write filesystem, and the second device <filename>/dev/sda3</filename> represents the
       compressed system image filesystem. The container filesystem aufs is used to cover the
       read/write layer with the read-only device to one read/write filesystem. If a file on the
       read-only device is going to be written, the changes inodes are part of the read/write
       filesystem. The device specifications in <code>UNIONFS_CONFIG</code> must correspond with the
        <code>IMAGE</code> and <code>PART</code> information. The following example illustrates the
       interconnections: </para>
      <screen>
IMAGE=/dev/sda3;image/browser;1.1.1;192.168.1.1;4096
PART=200;S;x,300;L;/,x;L;x
UNIONFS_CONFIG=/dev/sda2,/dev/sda3,aufs
DISK=/dev/sda</screen>
      <para> Because the second element of the <code>PART</code> list must define the
        <systemitem>root</systemitem> partition, it is important that the first device in
        <code>UNIONFS_CONFIG</code> references this device as a read/write device. The second device
       of <code>UNIONFS_CONFIG</code> must reference the given <code>IMAGE</code> device name.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <code>KIWI_KERNEL_OPTIONS</code>
     </term>
     <listitem>
      <para> Specifies additional command line options to be passed to the kernel when booting from
       disk. For example, to enable a splash screen, use <literal>vga=0x317 splash=silent</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <code>KIWI_BOOT_TIMEOUT</code>
     </term>
     <listitem>
      <para> Specifies the number of seconds to wait at the GRUB boot screen when doing a local
       boot. The default is 10 seconds. </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </sect3>
  <sect3 id="sec.kiwi.activating.netboot.controlfile">
   <title>The Netboot Client Control File <filename>hwtype.&lt;<replaceable>MAC
     Address</replaceable>></filename></title>
   <para>The control file is used to set up new netboot clients when there is no configuration file
    available corresponding to the client MAC address. The control file is created using the MAC
    address information, and uploaded to the <filename>/srv/tftpboot/upload</filename> directory on
    the TFTP server.</para>
  </sect3>
  <sect3 id="sec.kiwi.activating.netboot.hwinfofile">
   <title>The Netboot Client Hardware Info File <filename>hwinfo.&lt;<replaceable>MAC
     Address</replaceable>></filename></title>
   <para>The hardware info file contains hardware details of the new netboot clients. There is no
    configuration file corresponding to the client MAC address. The hardware info file is created
    using the MAC address information, and uploaded to the <filename>/srv/tftpboot/upload</filename>
    directory on the TFTP server.</para>
   <para>The netboot boot image support the standard (default) profile, and a special Xen profile.
    If the <option>bootprofile</option> attribute is set to <emphasis>xen</emphasis>, the Xen kernel
    and modules are used within the boot image, which boots the system image directly with an
    enabled Xen kernel. This turns the system image into a hypervisor without requiring a reboot. </para>
   <para>To boot a Xen kernel over the network via PXE, an additional boot loader called
     <filename>mboot.c32</filename> is required. <filename>mboot.c32</filename> is a COM32 module
    for H. Peter Anvin's SYSLINUX bootloader, which loads multiboot kernels and modules. It lets Xen
    be network-booted. For instructions on using mboot.c32, see <ulink
     url="http://www.kernel.org/git/?p=boot/syslinux/syslinux.git;a=blob;f=com32/modules/mboot.doc"
     >com32/modules/mboot.doc</ulink>.</para>
  </sect3>
 </sect2>
 <sect2 id="sec.kiwi.activating.isoboot">
  <title>The KIWI isoboot Image</title>
  <para>Normally, an image is installed on a disk or into the main memory of a computer via a
   deployment architecture that uses a boot image to transfers the image into its final destination.
   With KIWI, this is handled by the isoboot image. You can use either of the following techniques
   to boot a live system:</para>
  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>Use the <emphasis>old</emphasis> style to split the system image into Read-Only and
     Read/Write. The Read/Write image is pushed into main memory, while the Read-Only image is
     placed on the CD. (optional compression of the Read-Only image is possible). The isoboot image
     makes one root tree from both parts by using symbolic links. The CD-Boot structure of KIWI
     places the <filename>/bin</filename>, <filename>/boot</filename>,
      <filename>/lib</filename>,<filename> /opt</filename>, <filename>/sbin</filename>, and
      <filename>/usr</filename> directories on the CD, while the remainder of the directories are
     placed in the main memory of the system.</para>
   </listitem>
   <listitem>
    <para>Use the <emphasis>new</emphasis> style if you want to make use of the new overlay
     filesystems such as aufs or unionfs. In this case, the system image is not divided, and the
     isoboot boot image creates a writable RAM space which is overlayed into one root filesystem.
     The result is one Read/Write filesystem. You can also compress the system image, which lets you
     put more data on the CD. The new style is recommended over the old style.</para>
   </listitem>
  </itemizedlist>
  <para>Every isoboot description contains a <filename>cdboot</filename> directory with
    <filename>isolinux.cfg</filename> and <filename>isolinux.msg</filename> files. isolinux.cfg
   defines which boot parameters are used for booting the kernel, and
   <filename>isolinux.msg</filename> defines the message which is displayed if isolinux doesn't boot
   in graphics mode. An additional file, <filename>isolinux.sh</filename>, is a link to the standard
   suse-isolinux script, which creates an ISO image from a specified CD tree. The script also works
   for non-SUSE distributions, but the CD header of these images contains information which should
   be replaced if the distribution is not SUSE-based.</para>
 </sect2>
 <sect2 id="sec.kiwi.activating.vmxboot">
  <title>The KIWI vmxboot Image</title>
  <para>The KIWI vmxboot boot image is used for fully virtualized machines such as the ones provided
   by VMware or QEMU. The result of an image created with the VMX type is always a virtual disk
   containing the vmxboot image, the system image, a virtual disk geometry, and a boot loader (GRUB)
   to boot the vmxboot boot image.</para>
  <para>The vmxboot boot image detects the virtual disk device, then activates the system on the
   virtual disk. The boot image also writes some default files such as
   <filename>/etc/fstab</filename> to allow the system default initrd to be created and used. This
   means that the vmxboot image is replaced during first boot by the default system initrd. The
   replacement only takes place if the default system initrd can boot the image, which is not the
   case, for example, if a compressed image solution with an overlay filesystem like aufs is
  used.</para>
 </sect2>
 <sect2 id="sec.kiwi.activating.oemboot">
  <title>The KIWI oemboot Image</title>
  <para>The KIWI oemboot boot image works only with the VMX boot type (and therefore only with
   virtual disks). The oemboot was designed for OEM customers who want to have a pre-installed Linux
   system delivered to their customers. The idea is to have a virtual disk image which is copied on
   the real disk of a computer.</para>
  <para>As soon as the first boot takes place, the oemboot boot image repartitions the real disk,
   which it detects first, then it prepares the system to activate the YaST second stage process.
   Finally, the oemboot image boots into the system, and YaST starts with a special configuration
   sequence made for preinstalled systems.</para>
 </sect2>
 <sect2 id="sec.kiwi.activating.xenboot">
  <title>The KIWI xenboot Image</title>
  <para>The KIWI xenboot boot image works only with the Xen boot type. The Xen boot type creates all
   the information needed to run a Xen virtual machine with the previously created image, including
   the system image itself (which is a file containing the operating system data and the
   filesystem), the xenboot boot image as a compressed initrd file, the Xen kernel, and the Xen
   configuration file (which references the previously mentioned files). After KIWI finishes the
   image creation process, use the following command:</para>

  <screen>
xm create -c xen-configuration-file
</screen>

  <para>The primary task of the xenboot boot image is to load the required Xen modules, and to find
   out how the disk appears in the kernel. After this is done, the system can be activated.</para>
 </sect2>
 <sect2 id="sec.kiwi.activating.usbboot">
  <title>The KIWI usbboot Image</title>
  <para>The KIWI usbboot image works only with the USB boot type. The USB boot type creates all the
   files needed to install an operating system on a USB stick.</para>
  <para>Use the following KIWI options for the installation:</para>
  <para><option>--bootstick</option> , <option>--bootstick-system</option></para>
  <para>The files needed in this case include the system image itself and the usboot boot image
   (initrd). The primary task of the usbboot boot image is to find out how the BIOS mapped the USB
   stick. After the device is found, the system can be activated. KIWI also installs the boot
   manager to the USB stick so that each system can use the stick as the main operating system as
   soon as the BIOS can boot from a USB stick.</para>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
coding:utf-8
mode:xml
sgml-indent-step:1
sgml-omittag:nil
sgml-shorttag:nil
End:
-->

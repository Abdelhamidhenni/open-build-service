<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.docbook.org/xml/4.4/docbookx.dtd"
[
 <!ENTITY % entities SYSTEM "entity-decl.ent">
 %entities;
]>

<!--
 ***************************************************
 Please see license.xml for this document's license.
 ***************************************************
-->

<sect1 id="sec.kiwi.introduction" xml:base="kiwi_introduction.xml">
 <title>Introduction</title>
 <abstract>
  <para>
   The openSUSE KIWI Image System provides a complete operating system image
   solution for Linux supported hardware platforms as well as for
   virtualisation systems like Xen, VMware and others. The KIWI architecture
   is designed as a two stage system. The first stage, based on a
   valid <emphasis>software package source</emphasis>, creates a so
   called <emphasis>physical extend</emphasis> as provided by an image
   description. The second stage
   creates an operating system image from the physical extend . The result of
   that second stage is called a <emphasis>logical extend</emphasis> or
   operating system image.
  </para>
 </abstract>
 <sect2 id="sec.kiwi.introduction.concept">
  <title>Concept</title>
  <para>
   The first stage created by KIWI, the physical extend, requires at least
   one valid software package source, a so-called repository, in order
   to access the
   software to build a system. A repository consists of software packages,
   organized in a package tree that also includes some meta data. Software
   repositories can exist in different formats, therefore KIWI uses a
   Package-Manager to access them. With KIWI you have the choice for either
   <emphasis>smart</emphasis> or <emphasis>zypper</emphasis> to be used
   as package manager. Smart handles a wide range and also the most
   important repository formats. More information on smart is available
   at <ulink url="http://labix.org/smart"/>.
  </para>
  <para>
   The second stage&mdash;creating an operating system image&mdash;takes place
   without user interaction. Therefore all the necessary information needs to
   be created prior to the image building process. An image description tree
   stores all these information needed to create an image (see <xref
    linkend="sec.kiwi.introduction"/> for details).
  </para>
  <tip>
   <title>Operating System Images</title>
   <para>
    A regular installation process is starting from an installation image and
    installs single pieces of software until the system is complete. Normally
    such an installation process is interactive - the user is able to alter
    installation settings and configuration options. Contrary to that, an
    operating system image represents an already completed installation
    encapsulated as a file and optionally includes the configuration for a
    specific task. Such an operating system starts working as soon as the
    image has been installed to a system storage device (no matter if this is
    a volatile or non volatile storage device). An operating system image is
    deployed <quote>as is</quote>&mdash;no user interaction is possible.
   </para>
  </tip>
  <figure id="fig.kiwi.introduction.concept.architecture">
   <title> Image Serving Architecture</title>
   <mediaobject>
    <imageobject role="fo">
     <imagedata width="75%" fileref="intro.svg" format="SVG"/>
    </imageobject>
    <imageobject role="html">
     <imagedata width="75%" fileref="intro.png" format="PNG"/>
    </imageobject>
   </mediaobject> 
  </figure>
  <para>
   Because this document contains conceptual information about an image
   system, it is important to understand what an operating system image is all
   about. A normal installation process is starting from a given installation
   source and installs single pieces of software until the system is complete.
   During this process there may be manual user intervention required. However
   an operating system image represents an already completed
   <emphasis>installation</emphasis> encapsulated as a file and optionally
   includes the configuration for a specific task. Such an operating system
   starts working as soon as the image has been brought to a system storage
   device no matter if this is a volatile or non volatile storage. The process
   of creating an image takes place without user interaction. This means all
   requirements of the encapsulated system has to be fulfilled before the
   image is created. According to this the so called <emphasis>image
    description tree</emphasis> stores all the information needed to create an
   image.
  </para>
 </sect2>
 <sect2 id="sec.kiwi.introduction.image_types">
  <title>Supported Image Types</title>
  <para>
   The logical extend is the final result of an image creation process
   and represents an operating system as part of a specific filesystem
   which could also be covered by the structures of real or virtual
   hardware layers. There are different types of images whereas KIWI
   supports the following:
  </para>
  <variablelist>
   <varlistentry>
    <term>The Live-System image [iso]</term>
    <listitem>
     <para>
      The iso type is used to create live systems. A live system is an
      operating system on a CD or DVD. When the system boot all data is
      read from the CD/DVD. The system provides write support but all
      data is stored in RAM. So as soon as the system shut down the data
      will be lost. The generated iso file needs to be burned on the
      media
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>The virtual hard disk image [vmx]</term>
    <listitem>
     <para>
      The vmx type is used to create a virtual disk. The disk provides
      the partition information the boot manager and all other data which
      are found on a real disk as well. Such an image can be used as disk
      for full-virtual systems like Qemu or VMware. KIWI also creates the
      VMware configuration file if requested. The generated image requires
      a virtualisation software to be installed. In a full virtualized
      all components are virtualized. This includes the storage devices
      as well as the processor and all other parts of the system.
      To activate a virtual disk system system the user only needs to call the
      correct <quote>player</quote> application which in case of QEMU is
      <command>qemu</command> and in case of VMware <command>vmplayer</command>
      is used.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>The para-virtual Xen image [xen]</term>
    <listitem>
     <para>
      The xen type is used to create an operating system image based on
      a given filesystem including a special xen boot image, the xen kernel
      and the xen configuration file. If the current system is a xen
      hypervisor one can create new para virtual machines with the
      data provided by KIWI. The generated image requires a Xen hypervisor
      running on the computer.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>The USB-Stick image [usb]</term>
    <listitem>
     <para>
      The usb type is used to create an operating system image based on
      a given filesystem including a special usb boot image. KIWI is able
      to install the generated image onto an USB stick. If your system
      BIOS is able to boot from a USB stick you can use this stick as
      complete operating system. Compared to a live system an USB stick
      provides permanent storage of your private data as well. The
      generated image can be installed by a subsequent KIWI call
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>The network image [pxe]</term>
    <listitem>
     <para>
      the pxe type is used to create an operating system image based on
      a given filesystem including a special network boot image. The image
      itself will be stored on a server from where the boot image can
      download and activate it. The generated image requires a DHCP/TFTP
      network infrastructure running on a server
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>The network split image [split]</term>
    <listitem>
     <para>
      the split type is used to create an operating system image based on
      two given filesystems. The image will be divided into two portions
      whereas the first portion represents the data which requires read/write
      access and the second portion represents the read-only data. According
      to this the second porition can be part of a compressed read-only
      filesystem. This image type doesn't automatically create its boot
      image and works only with netboot and xennetboot boot images. The
      generated image requires a DHCP/TFTP network infrastructure
      running on a server
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
  <para>
   The image base type is referenced in the main image configuration file
   config.xml and has several mandatory/optional parameters. The parameters
   influences the operating system environment like the used filesystem
   but the result is still an image made for the purpose described by   
   the base type.
  </para>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
coding:utf-8
mode:xml
sgml-indent-step:1
sgml-omittag:nil
sgml-shorttag:nil
End:
-->

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
  "http://www.docbook.org/xml/4.4/docbookx.dtd"
[
 <!ENTITY % entities SYSTEM "entity-decl.ent">
 %entities;
]>

<!--
 ***************************************************
 Please see license.xml for this document's license.
 ***************************************************
-->

<sect1 id="sec.kiwi.introduction" xml:base="kiwi_introduction.xml">
 <title>Introduction</title>
 <para>KIWI is a complete imaging solution that can be divided in to three distinct stages. The
  first stage, which is based on a valid <emphasis>software package source</emphasis>, creates a
   <emphasis>physical extend</emphasis> as provided by an image description. The second stage
  creates an operating system image from the physical extend. This image is called a
   <emphasis>logical extend</emphasis> or <emphasis>operating system image</emphasis>. In the third
  stage, you deploy the new image.</para>
 <itemizedlist mark="bullet" spacing="normal">
  <listitem>
   <para>
    <xref linkend="sec.kiwi.introduction.physical"/>
   </para>
  </listitem>
  <listitem>
   <para>
    <xref linkend="sec.kiwi.introduction.logical" xrefstyle="RefNoPage"/>
   </para>
  </listitem>
  <listitem>
   <para>
    <xref linkend="sec.kiwi.introduction.deployment" xrefstyle="RefWPage"/>
   </para>
  </listitem>
 </itemizedlist>
 <sect2 id="sec.kiwi.introduction.physical">
  <title>Physical Extend</title>
  <para>In this stage, you prepare a directory containing the contents of your new filesystem based
   on a software package source (such as SUSE Linux Enterprise Desktop 10) and an image description
   file (<filename>config.xml</filename>). During this stage, you determine which packages are
   installed on your image and which configuration files are included.</para>
  <para>The physical extend requires at least one valid software package source, called a
   repository, to access the software you want to use to build an image. A repository consists of
   software packages, organized in a package tree (also called an image description tree), and meta
   data. Because software repositories exist in many different formats, KIWI uses a package manager
   to access them. KIWI lets you use either the <ulink url="http://labix.org/smart">Smart Package
    Manager</ulink> or <ulink url="http://en.opensuse.org/Zypper">Zypper</ulink>.</para>
  <para>To prepare the physical extend, use the following command: </para>
  <para>
   <command>kiwi -p <replaceable>/path</replaceable></command>
  </para>
  <para><replaceable>/path</replaceable> is the location of your <filename>config.xml</filename>
   file.</para>
  <para>This command creates the directory
    <filename>/tmp/kiwi.&lt;<replaceable>random</replaceable>></filename>, where
    <replaceable>random</replaceable> is a random string.</para>
  <para>For more detailed information, see <xref linkend="sec.kiwi.create"
    xrefstyle="SectTitleOnPage"/>.</para>
 </sect2>
 <sect2 id="sec.kiwi.introduction.logical">
  <title>Logical Extend</title>
  <para>This stage, based on the physical extend, creates an operating system image. It takes place
   without user interaction, so all the necessary information needs to be created prior to the image
   building process.</para>
  <para>You can use the <filename>images.sh</filename> configuration script while creating the
   logical extend to clean-up your image or to perform additional configuration. This script is
   called at the beginning of the image creation process.</para>
  <para>To create the logical extend, use the following command:</para>
  <para>
   <command>kiwi -c /<replaceable>path1</replaceable> -d /<replaceable>path2</replaceable></command>
  </para>
  <para><replaceable>/path1</replaceable> is the path to your previously prepared
     <filename>/tmp/kiwi.&lt;<replaceable>random</replaceable>></filename> directory, and
    <replaceable>/path2</replaceable> is the destination output path.</para>
  <para>This command creates an image file and an associated MD5 checksum.</para>
  <para>For more detailed information, see <xref linkend="sec.kiwi.description"
    xrefstyle="SectTitleOnPage"/>.</para>
  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
     <xref linkend="sec.kiwi.introduction.osi"/>
    </para>
   </listitem>
   <listitem>
    <para>
     <xref linkend="sec.kiwi.introduction.image_types" xrefstyle="HeadingOnPage"/>
    </para>
   </listitem>
  </itemizedlist>
  <sect3 id="sec.kiwi.introduction.osi">
   <title>Operating System Images </title>
   <para>A regular installation process starts with an installation image, then installs single
    pieces of software until the system is complete. This type of installation process is usually
    interactive, meaning that the user can modify installation settings and configuration options.
    An operating system image, on the other hand, represents an already completed installation
    encapsulated in a file. It is a copy of a system and its related data (such as the kernel, file
    systems, libraries, and programs) at a given point in time. It can even include the
    configuration for a specific task.</para>
   <para>An operating system image starts working as soon as the image is installed on some sort of
    system storage device, no matter if the device is volatile or nonvolatile. An operating system
    image is deployed <quote>as is,</quote> and no user interaction is possible.</para>
   <figure id="fig.kiwi.introduction.concept.architecture">
    <title> Image Serving Architecture</title>
    <mediaobject>
     <imageobject role="fo">
      <imagedata width="75%" fileref="intro.svg" format="SVG"/>
     </imageobject>
     <imageobject role="html">
      <imagedata width="75%" fileref="intro.png" format="PNG"/>
     </imageobject>
    </mediaobject>
   </figure>
   <para>The process of creating an operating system image takes place without user interaction, so
    all requirements of the encapsulated system must be fulfilled before the image is created. The
    image description tree stores all the information needed to create an image.</para>
  </sect3>
  <sect3 id="sec.kiwi.introduction.image_types">
   <title>Supported Image Types</title>
   <para>The logical extend is the final result of an image creation process, and it represents an
    operating system as part of a specific filesystem which could also be covered by the structures
    of real or virtual hardware layers. KIWI supports the following image types:</para>
   <variablelist>
    <varlistentry id="iso">
     <term>Live-system image [ISO]</term>
     <listitem>
      <para>The ISO image type (<filename>.iso</filename>) is used to create a live system (an
       operating system on a CD or DVD). When the system boots, all data is read from the CD/DVD.
       The system provides write support, but all data is stored in RAM, so as soon as the system
       shuts down, the data is lost. The generated <filename>.iso</filename> file must be burned on
       the media.</para>
     </listitem>
    </varlistentry>
    <varlistentry id="vmx">
     <term>Virtual hard disk image [VMX]</term>
     <listitem>
      <para>The VMX image type is used to create a virtual disk which provides partition
       information, the boot manager, and all other data found on a real disk. This kind of image
       can be used as a disk for full-virtual systems such as QEMU or VMware. KIWI also creates the
       VMware configuration file if requested. The generated image requires virtualization software
       to be installed. In a full virtualized environment, all components are virtualized, including
       the storage devices, the processor, and all other parts of the system. To activate a virtual
       disk system, the user calls the correct <quote>player</quote> application. For QEMU, use
        <command>qemu</command>, and for VMware, use <command>vmplayer</command>.</para>
     </listitem>
    </varlistentry>
    <varlistentry id="xen">
     <term>Paravirtual Xen image [Xen]</term>
     <listitem>
      <para>The Xen image type is used to create an operating system image based on a given
       filesystem including a special Xen boot image, the Xen kernel, and the Xen configuration
       file. If the current system is a Xen <ulink url="http://en.wikipedia.org/wiki/Hypervisor"
        >hypervisor</ulink>, you can create new paravirtual machines with the data provided by KIWI.
       The generated image requires a Xen hypervisor running on the computer.</para>
     </listitem>
    </varlistentry>
    <varlistentry id="usb">
     <term>USB-stick image [USB]</term>
     <listitem>
      <para>The USB image type is used to create an operating system image based on a given
       filesystem including a special USB boot image. KIWI can install the generated image onto a
       USB stick. If your system BIOS can boot from a USB stick, you can use the stick as complete
       operating system. Compared to a live system, a USB stick provides permanent storage of your
       private data. The generated image can be installed by a subsequent KIWI call.</para>
     </listitem>
    </varlistentry>
    <varlistentry id="pxe">
     <term>Network image [PXE]</term>
     <listitem>
      <para>The Preboot eXecution Environment (PXE) is used to boot computers using a network
       interface card independent of available data storage devices (such as a hard disk) or an
       installed operating system. The image itself is stored on a server, and a boot image
       downloads and activates it. The generated image requires a DHCP/TFTP network infrastructure
       running on a server.</para>
     </listitem>
    </varlistentry>
    <varlistentry id="split">
     <term>Network split image [split]</term>
     <listitem>
      <para>The split image type is used to create an operating system image based on two given
       filesystems. The image is divided into two portions, with the first portion representing the
       data which requires Read/Write access and the second portion representing the Read-only data.
       The second portion can be part of a compressed Read-only filesystem. This image type does not
       automatically create a boot image, and it works only with netboot boot images. The generated
       image requires a DHCP/TFTP network infrastructure running on a server.</para>
     </listitem>
    </varlistentry>
   </variablelist>
   <para>The image base type is referenced in the main image configuration file
    <filename>config.xml</filename> and has several mandatory/optional parameters. The parameters
    influence the operating system environment like the used filesystem but the result is still an
    image made for the purpose described by the base type.</para>
  </sect3>
 </sect2>
 <sect2 id="sec.kiwi.introduction.deployment">
  <title>Deployment</title>
  <para>You can use any of the following methods to deploy your new image:</para>
  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <formalpara id="bbyh4u1">
     <title>Netboot:</title>
     <para>Advanced Trivial File Transfer Protocol (ATFTP) is used to deploy the newly created image
      via PXE. You can use KIWI to create a special kernel and initrd for the purpose of deploying a
      KIWI based image. You can load the image into volatile RAM or onto non-volatile, persistent
      storage such as flash memory or a hard drive. KIWI checks to see if a KIWI image is installed
      on the target system. If the version installed on the target system is older than the version
      being served, the image on the target system is updated.</para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara id="bbyh4x1">
     <title>Locally Accessible Hard Disk:</title>
     <para>The image can be installed by dumping (<command>dd</command>) the image file on a
      previously created partition on this disk. To activate the system, use a boot manager such as
      GRUB or LILO.</para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara id="bbyh4x2">
     <title>Paravirtualized:</title>
     <para>In case of a paravirtualized target system such as Xen, install the image by copying the
      image file on the target system. To activate the virtual system, a configuration must be
      provided which points to the image in some way (for example, you can use a loop mounted
      location).</para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara id="bbyh4x3">
     <title>Fully Virtualized:</title>
     <para>In case of a full virtualized target system such as VMware, the image represents a
      virtual disk as a file which can be played by the virtualization system.</para>
    </formalpara>
   </listitem>
  </itemizedlist>
  <para>For more information, see <xref linkend="sec.kiwi.activating" xrefstyle="SectTitleOnPage"
  />.</para>
 </sect2>
</sect1>
<!-- Keep this comment at the end of the file
Local variables:
coding:utf-8
mode:xml
sgml-indent-step:1
sgml-omittag:nil
sgml-shorttag:nil
End:
-->

#!/usr/bin/env ruby
ENV['RAILS_ENV'] = 'test'
require File.dirname(__FILE__) + '/../config/boot'
require File.expand_path(File.join(File.dirname(__FILE__), '..', 'config', 'environment'))

Thread.abort_on_exception = true
srcsrv_out = nil
reposrv_out = nil
logger = RAILS_DEFAULT_LOGGER
FileUtils.rm_rf("#{RAILS_ROOT}/tmp/backend_data")
FileUtils.rm_rf("#{RAILS_ROOT}/tmp/backend_config")

puts "Creating backend config at #{RAILS_ROOT}/tmp/backend_config/BSConfig.pm"
FileUtils.mkdir "#{RAILS_ROOT}/tmp/backend_config"
file = File.open("#{RAILS_ROOT}/tmp/backend_config/BSConfig.pm", "w")
File.open("#{RAILS_ROOT}/../backend/BSConfig.pm.template") do |template|
  template.readlines.each do |line|
    line.gsub!(/(our \$bsuser)/, '#\1')
    line.gsub!(/(our \$bsgroup)/, '#\1')
    line.gsub!(/our \$bsdir = .*/, "our $bsdir = '#{RAILS_ROOT}/tmp/backend_data';")
    line.gsub!(/:5352/, ":#{SOURCE_PORT}")
    line.gsub!(/:5252/, ":3201") # not yet used
    file.print line
  end
end
file.close

puts "Starting backend srcserver..."
srcsrv = Thread.new do
  FileUtils.symlink("#{RAILS_ROOT}/../backend/bs_srcserver", "#{RAILS_ROOT}/tmp/backend_config/bs_srcserver")
  srcsrv_out = IO.popen("cd #{RAILS_ROOT}/tmp/backend_config; exec perl -I#{RAILS_ROOT}/../backend -I#{RAILS_ROOT}/../backend/build ./bs_srcserver 2>&1")
  puts "Started backend srcserver with pid: #{srcsrv_out.pid}"
  begin
    Process.setpgid srcsrv_out.pid, 0
  rescue Errno::EACCES
    puts "Could not set backend srcserver group to root"
    # what to do?
  end
  while srcsrv_out
    begin
      line = srcsrv_out.gets
      logger.debug line.strip unless line.blank?
    rescue IOError
      break
    end
  end
end

puts "Starting backend repserver..."
reposrv = Thread.new do
  FileUtils.symlink("#{RAILS_ROOT}/../backend/bs_repserver", "#{RAILS_ROOT}/tmp/backend_config/bs_repserver")
  reposrv_out = IO.popen("cd #{RAILS_ROOT}/tmp/backend_config; exec perl -I#{RAILS_ROOT}/../backend -I#{RAILS_ROOT}/../backend/build ./bs_repserver 2>&1")
  puts "Started backend repserver with pid #{reposrv_out.pid}"
  begin
    Process.setpgid reposrv_out.pid, 0
  rescue Errno::EACCES
    # what to do?
    puts "Could not set backend repserver group to root"
  end
  while reposrv_out
    begin
      line = reposrv_out.gets
      logger.debug line.strip unless line.blank?
    rescue IOError
      break
    end
  end
end

while true
  puts "Connecting to srcserver..."
  begin
    Net::HTTP.start(SOURCE_HOST, SOURCE_PORT) {|http| http.get('/') }
  rescue Errno::ECONNREFUSED
    sleep 0.5
    next
  end
  break
end

while true
  puts "Connecting to repserver..."
  begin
    Net::HTTP.start(SOURCE_HOST, 3201) {|http| http.get('/') }
  rescue Errno::ECONNREFUSED
    sleep 0.5
    next
  end
  break
end

puts "DONE NOW"
$stdout.flush

dienow = false
trap("INT") { dienow = true }

while !dienow do
  sleep 1
end

puts "kill #{srcsrv_out.pid}"
Process.kill "INT", -srcsrv_out.pid
puts "kill #{reposrv_out.pid}"
Process.kill "INT", -reposrv_out.pid


srcsrv_out.close
srcsrv_out = nil
srcsrv.join
reposrv_out.close
reposrv_out = nil
reposrv.join
FileUtils.rm_rf("#{RAILS_ROOT}/tmp/backend_data")
FileUtils.rm_rf("#{RAILS_ROOT}/tmp/backend_config")

require 'wizard'

class WizardController < ApplicationController

  # GET/POST /source/<project>/<package>/_wizard
  def package_wizard
    prj_name = params[:project]
    pkg_name = params[:package]
    pkg = DbPackage.find_by_project_and_name(prj_name, pkg_name)
    unless pkg
      render_error :status => 404, :errorcode => "unknown_package",
        :message => "unknown package '#{pkg_name}' in project '#{prj_name}'"
      return
    end
    if not @http_user.can_modify_package?(pkg)
      render_error :status => 403, :errorcode => "change_package_no_permission",
        :message => "no permission to change package"
      return
    end

    logger.debug("package_wizard, #{params.inspect}")

    wizard_xml = "/source/#{prj_name}/#{pkg_name}/wizard.xml"
    begin
      @wizard_state = WizardState.new(backend_get(wizard_xml))
      # handle old wizard.xml files
      if @wizard_state.version < 1
        @wizard_state.data["packtype"] = "generic"
      end
    rescue ActiveXML::Transport::NotFoundError
      @wizard_state = WizardState.new("")
    end
    @wizard_state.version = 1
    @wizard_state.data["name"] = pkg_name
    if pkg_name =~ /^perl-/i
      @wizard_state.guess["packtype"] = "perl"
    elsif pkg_name =~ /^python-/i
      @wizard_state.guess["packtype"] = "python"
    end
    wizard_step_tarball
    if @wizard_state.dirty
      backend_put(wizard_xml, @wizard_state.serialize)
    end
  end

  private

  @@wizard_entries = {
    # name => [type, label, legend]
    "tarball"     => ["file", "Source tarball to upload", ""],
    "packtype"    => ["select", "What kind of package is this?", ""],
    "version"     => ["text", "Version of the package", "Note that the version must not contain dashes (-)"],
    "summary"     => ["text", "Short summary of the package", ""],
    "description" => ["longtext", "Describe your package", ""],
    "license"     => ["text", "License of the package", ""],
    "group"       => ["text", "Package group", "See http://en.opensuse.org/SUSE_Package_Conventions/RPM_Groups"],
    # autogenerated
    "name"        => [],
  }
  @@wizard_select_options = {
    # option lists for 'select' type entries
    # name => [[name, label, legend], ...]
    "packtype"    => [["generic", "Generic (./configure && make)", ""],
                      ["perl", "Perl module", ""],
                      ["python", "Python module", ""],
                     ]
  }

  def wizard_add_entry(name)
    if @@wizard_entries[name][0] == "select"
      @wizard_form.add_select_entry(name,
                                    @@wizard_entries[name][0], # type
                                    @@wizard_entries[name][1], # label
                                    @@wizard_entries[name][2], # legend
                                    @wizard_state[name],
                                    @@wizard_select_options[name])
    else
      @wizard_form.add_entry(name,
                             @@wizard_entries[name][0], # type
                             @@wizard_entries[name][1], # label
                             @@wizard_entries[name][2], # legend
                             @wizard_state[name])
    end
  end

  def wizard_step_tarball
    if params[:tarball] && ! params[:tarball].empty?
      filename = params[:tarball]
      # heuristics
      @wizard_state.data["tarball"] = filename
      version = Wizard.guess_version(params[:package], filename)
      if version
        @wizard_state.guess["version"] = version
      end
      # TODO: unpack the tarball somehow and try to guess as much as possible...
    end
    if params[:packtype] && ! params[:packtype].empty?
      @wizard_state.data["packtype"] = params[:packtype]
      case @wizard_state["packtype"]
      when "perl"
        @wizard_state.guess["license"] = "Artistic license"
        @wizard_state.guess["group"] = "Development/Libraries/Perl"
      when "python"
        @wizard_state.guess["license"] = "GPL v2 or later"
        @wizard_state.guess["group"] = "Development/Libraries/Python"
      else
        @wizard_state.guess["license"] = "GPL v2 or later"
        @wizard_state.guess["group"] = "Productivity/Other"
      end
    end
    if @wizard_state.data["tarball"] && @wizard_state.data["packtype"]
      wizard_step_meta
      return
    end
    @wizard_form = WizardForm.new("Step 1/2", "What do you want to package?")
    wizard_add_entry("tarball")
    wizard_add_entry("packtype")
    render :template => "wizard", :status => 200;
  end

  def wizard_step_meta
    have_all = true
    ["version", "summary", "description", "license", "group"].each do |entry|
      if params[entry] && ! params[entry].empty?
        @wizard_state.data[entry] = params[entry]
      end
      if ! @wizard_state.data[entry]
        have_all = false
      end
    end
    if have_all
      wizard_step_finish
      return
    end
    @wizard_form = WizardForm.new("Step 2/2", "Please describe your package")
    wizard_add_entry("summary")
    wizard_add_entry("description")
    wizard_add_entry("version")
    wizard_add_entry("license")
    wizard_add_entry("group")
    render :template => "wizard", :status => 200
  end

  def wizard_step_finish
    if @wizard_state.data["created_spec"] == "true"
      wizard_step_done
      return
    end
    package = Package.find(params[:package], :project => params[:project])
    # FIXME: is there a cleaner way to do it?
    package.data.elements["title"].text = @wizard_state.data["summary"]
    package.data.elements["description"].text = @wizard_state.data["description"]
    package.save
    specfile = "#{params[:package]}.spec"
    template = File.read("#{RAILS_ROOT}/files/wizardtemplate.spec")
    erb = ERB.new(template)
    template = erb.result(binding)
    backend_put("/source/#{params[:project]}/#{params[:package]}/#{specfile}", template)
    @wizard_state.data["created_spec"] = "true"
    @wizard_form = WizardForm.new("Finished",
      "I created #{specfile} for you. Please review it and adjust it to fit your needs.")
    @wizard_form.last = true
    render :template => "wizard", :status => 200
  end

  def wizard_step_done
    @wizard_form = WizardForm.new("Nothing to do",
    "There is nothing I can do for you now. In the future, I will be able to help you updating your package or fixing build errors")
    @wizard_form.last = true
    render :template => "wizard", :status => 200
  end

end

# vim:et:ts=2:sw=2

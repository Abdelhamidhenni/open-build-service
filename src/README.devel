

  Setting up a development environment
--------------------------------

To install ruby on rails, please install the rubygems package and
run: "gem install -y rails" to install the rails libs on your system.

The frontend uses a MySQl backend. Install a mysql server and add the required
rails databases (frontend_development and frontend_test). Change username/password
in frontend/config/database.yml. To populate the database, run 'rake migrate'
in the frontend root directory.

A default user named 'Admin' is created with password 'opensuse'.

To start the rails apps for development purposes, use the buildservice/src/start script.

./start web will start a webclient on localhost:3000
./start front will start a frontend (API) on localhost:3001

the webclient is preconfigured to use the API on localhost:3001. If you want to use
another API server, change the settings in 
buildservice/src/webclient/config/environments/development_base.rb.


  Generating the frontends API documentation
--------------------
To generate the docu you need the ruby builder lib. 
It can be installed with: "gem install builder"
The docu then can be generated with the command:
  docs/architecture/rest_doc --html api.txt



  Using the debugger
--------------------

The debugger waits for connections from the corresponding application.
Such a connection is established as soon as the method 'breakpoint' is
called from within the application. The breakpoint method suspends
application flow and transfers control to the debugger, which opens
an irb shell in the context of the breakpoint call. For more information
on the debugger, see

http://api.rubyonrails.com/classes/Breakpoint.html#M000833



  Deployment
------------

If you setup the buildservice to develop locally you probably don't need
to deploy. Using the webrick server from within the checkout directory is
sufficient.


Deploy locations (SUSE specific):

The deploy path is referred to as $DEPLOY_LOCATION in the later sections.

- backend


- backend-dummy

  server: buildservice.suse.de
  path: /srv/www/opensuse/backend-dummy/


- frontend

  server: buildservice.suse.de (internal), api.opensuse.org (external)
  path: /srv/www/opensuse/frontend/


- webclient

  server: buildservice.suse.de (internal), build.opensuse.org (external)
  path: /srv/www/opensuse/webclient/



Prerequisites:

The buildservice uses Switchtower (http://manuals.rubyonrails.com/read/book/17)
for deployment. Before using the deploy scripts, the switchtower gem has to be
installed:

%> gem install switchtower


Customizing your configuration

Switchtower deployment is available for webclient, frontend (API) and common libs.
In each of the root directories of these parts (below trunk/buildservice/src), there
is a file config/deploy.rb.template. Change the values in these files to match your
setup (SUSE developers: use the deploy.rb scripts from internal svn).



Preparing a setup for the first deploy:

In the three directories trunk/buildservice/src/(frontend|webclient|current), call:

%> rake remote_exec ACTION=setup



Deploying:

Call rake deploy in the RAILS_ROOT directory of the part you want to deploy. If your
forge username is different from the username on your workstation, set the
environment BS_SVN_USER to your forge username.

Example:
Deploy the webclient using forge user 'lieschenmueller':

%> cd trunk/buildservice/src/webclient
%> rake deploy BS_SVN_USER=lieschenmueller

If the database schema has changed, ssh to the server running the API database
after the deploy and update it manually. The update script is located in 
$DEPLOY_LOCATION/current/db/ on the server.

Warning:
The current schema is autogenerated for use with the development database
and contains some statements with hardcoded database names. Remember to change
the names to the production database before applying the new schema on a production
system.

After the database is updated, restart the FastCGI processes:

%> cd $DEPLOY_LOCATION
%> script/process/reaper -d /srv/www/opensuse/frontend/current/public/dispatch.fcgi


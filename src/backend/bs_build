#!/bin/bash
#
# Copyright (c) 2006, 2007 Michael Schroeder, Novell Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program (see the file COPYING); if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA
#
################################################################
#
# to be integrated into bs_worker...
#

BUILD_HELPER=./bs_buildhelper
BUILD_DIR=${BUILD_DIR:-/usr/lib/build}

BUILD_ROOT=
XEN=

unset LANGUAGE
unset LANG
export LC_ALL=POSIX
export BUILD_DIR

while test -n "$1"; do
    case $1 in
    --root)
	shift
        BUILD_ROOT="$1"
	shift
	;;
    --xen)
	XEN=true
	shift
	;;
    *)
	break
	;;
    esac
done

if test -z "$BUILD_ROOT" ; then
    echo "you must specify a build root" >&2
    exit 1
fi

BUILDINFO="$1"

if test -z "$BUILDINFO" ; then
    echo "Usage: bs_build --root <buildroot> <buildinfo>" >&2
    exit 1
fi

eval `$BUILD_HELPER vars $BUILDINFO || echo exit 1`
test -z "$SPECFILE" && exit 1

echo "Building '$PNAME' for project '$PROJECT' target '$REPOSITORY' arch '$TARGETARCH'"
rm -f $BUILD_ROOT/.build.meta
rm -rf $BUILD_ROOT/.build.packages
echo "fetching sources..."
rm -rf $BUILD_ROOT/.build-srcdir
mkdir -p $BUILD_ROOT/.build-srcdir || exit 1
if ! $BUILD_HELPER getsources $BUILDINFO $BUILD_ROOT/.build-srcdir ; then
    echo "could not fetch sources"
    exit 1
fi
if test -e "$BUILD_ROOT/.build-srcdir/.errors" ; then
    cat "$BUILD_ROOT/.build-srcdir/.errors"
    exit 1
fi

#
# check source integrity...
#
metasum=$(cd $BUILD_ROOT/.build-srcdir; md5sum * | md5sum -)
metasum=${metasum%  -}
if test "$metasum" != "$VMD5" ; then
    echo "source checksum error: $metasum != $VMD5"
    exit 1
fi

#
# get all binaries & meta files
#
RPMCACHEDIR=$BUILD_ROOT/.rpms
echo "fetching all packages..."
rm -rf $RPMCACHEDIR
mkdir -p $RPMCACHEDIR || exit 1
$BUILD_HELPER getbinaries $BUILDINFO $RPMCACHEDIR || exit 1

#
# calculate meta information
#
(
    echo "$PMD5  $PNAME"
    for PKG in $PACKAGE_DEPS ; do
         test -f "$RPMCACHEDIR/$PKG.meta" && sed -e "1s/  .*/  $PKG/" -e "2,\$s/  /  $PKG\//" < "$RPMCACHEDIR/$PKG.meta"
    done
) | $BUILD_HELPER genmeta $SUBPACKS > $BUILD_ROOT/.build.meta

#
# get config
#
$BUILD_HELPER getconfig $BUILDINFO > $BUILD_ROOT/.config

#
# create rpmlist
#
: >$BUILD_ROOT/.rpmlist
for PKG in $PACKAGES_TO_INSTALL ; do
    if test -e $RPMCACHEDIR/$PKG.rpm ; then
	echo $PKG $RPMCACHEDIR/$PKG.rpm >>$BUILD_ROOT/.rpmlist
    else
	echo $PKG $RPMCACHEDIR/$PKG.deb >>$BUILD_ROOT/.rpmlist
    fi
done
echo "preinstall: $PACKAGES_TO_PREINSTALL" >>$BUILD_ROOT/.rpmlist
echo "runscripts: $PACKAGES_TO_RUNSCRIPTS" >>$BUILD_ROOT/.rpmlist

#
# finally run build
#
XENARGS=
if test -n "$XEN" ; then
  XENMEMORY=
  test -f "$BUILD_ROOT/memory" && XENMEMORY=" --xenmemory `cat $BUILD_ROOT/memory`"
  XENARGS="/.mount --xen $BUILD_ROOT/root --xenswap $BUILD_ROOT/swap$XENMEMORY --logfile $BUILD_ROOT/.build.log"
  mkdir -p $BUILD_ROOT/.mount
fi

if ! $BUILD_DIR/build --root $BUILD_ROOT$XENARGS --clean --norootforbuild --dist $BUILD_ROOT/.config --rpmlist $BUILD_ROOT/.rpmlist --release "$RELEASE" --arch "$TARGETARCH" --reason "Building '$PNAME' for project '$PROJECT' target '$REPOSITORY' arch '$TARGETARCH' srcmd5 '$PMD5'" "$BUILD_ROOT/.build-srcdir/$SPECFILE" ; then
    echo "build failed."
    exit 1
fi

#
# for xen builds copy rpms into swap space
#
if test -n "$XEN" ; then
    echo "extracting built packages..."
    if ! $BUILD_DIR/extractbuild --xen $BUILD_ROOT/root --xenswap $BUILD_ROOT/swap ; then
	echo "extractbuild failed."
	exit 1
    fi
    # extract binaries from cpio (for now)
    mkdir -p $BUILD_ROOT/.build.packages
    rm -f $BUILD_ROOT/.build.packages/SRPMS
    ln -s . $BUILD_ROOT/.build.packages/SRPMS
    (cd $BUILD_ROOT/.build.packages ; cpio --extract --no-absolute-filenames -v < $BUILD_ROOT/swap)
    echo "extract succeeded."
else
    echo "build succeeded."
fi

exit 0

============================
Installation and development
============================

This document explains how to setup the Build Service for development or
deployment.


Prerequisites
=============

Before you can start developing for the openSUSE Build Service or deploying
it, you have to fetch some additional dependencies in the repository. Please
issue the following commands in your shell:

 $ git submodule init
 $ git submodule update
 $ git pull origin master


Software dependencies
=====================

The various parts of the openSUSE Build Service are implemented in different
languages. Also, it allows to configure the database backend (e.g. you can even
use SQLite3 for development/testint and MySQL for production).

- Perl version 5.12.1 or later
- MySQL version 5.1.46 or later and / or
- SQLite3 version 3.6.23 or later
- Ruby version 1.8.7 and Ruby on Rails version 2.3.5 or 2.3.8 (exact versions)

To get all the dependencies and useful additional tools for openSUSE-11.3,
please issue the following commands as root user in your shell:

 $ zypper addrepo --name "openSUSE-11.3 Tool" \
    http://download.opensuse.org/repositories/openSUSE:/Tools/openSUSE_11.3/ \
    opensuse-tools
 $ zypper refresh
 $ zypper install devel_rpm_build osc mysql-community-server sqlite3 \
                  perl perl-Net-Domain perl-Net-SSLeay perl-BSSolv \
                  ruby ruby-mysql rubygems rubygem-sqlite3 rubygem-rails-2_3 \
                  rubygem-delayed_job rubygem-gruff rubygem-libxml-ruby \
                  rubygem-sqlite3 rubygem-daemons \
                  rubygem-exception_notification


Deployment
==========

The Build Service is flexible enough to support several deployment scenarios.
These scenarios are described in the following (with increasing complexity).


Option 1: Only use the webui
----------------------------

If you want to work only on the Rails web frontend (webui) or running your own
webui instance, there is no need to have an own backend server running. It is
sufficient to start the webui with its default values. For that to work you
have to change into its subdirectory and create the initial config like this:

 $ cd src/webui
 $ cp config/database.yml.example config/database.yml

Afterwards you can simply start the webui like this:

 $ ./scripts/server

Open up your favorite browser and enter the address http://127.0.0.1:3000/
and you should see your own Build Service webui instance.


Option 2: Use the webui and api
-------------------------------

TODO


Option 2: Setup a complete Build Service
----------------------------------------

TODO


Development
===========

TODO
